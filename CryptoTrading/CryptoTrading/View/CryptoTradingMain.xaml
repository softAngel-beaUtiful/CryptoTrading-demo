<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:lib="clr-namespace:CryptoTrading.TQLib"
    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
    xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
    x:Class="CryptoTrading.TQMain"
        Title="TickQuant Crypto Trading Terminal Ver1.2.1" Height="780" Width="940" Loaded="Window_Loaded" Closed="Window_Closed" Name="Main"
        WindowState="Maximized" Icon="../tdt.ico" KeyDown="Window_KeyDown">
    <!--customer command binding-->
    <Window.Resources>
        <Style TargetType="Button">
            <Setter Property="FontStyle" Value="Normal"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="FontSize" Value="20"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <lib:OrderBoardQuantModeConverter x:Key="OrderBoardQuantModeConverter1"/>
        <!--lib:OrderBoardOrderModeConverter x:Key="OrderBoardOrderModeConverter1"/-->
        <lib:OrderBoardPricingModeConverter x:Key="OrderBoardPricingModeConverter1"/>
        <!--lib:OrderBoardOrderModeTextConverter x:Key="OrderBoardOrderModeTextConverter1"/-->
        <lib:BoolFalseToVisibilityStringConverter x:Key="BoolFalseToVisibilityStringConverter1"/>
        <lib:OrderBoardHedgeRatioConverter x:Key="OrderBoardHedgeRatioConverter1"/>
        <!-- TextBox -->
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Effect">
                <Setter.Value>
                    <DropShadowEffect BlurRadius="0" Color="Red" Direction="0" Opacity="0.8" RenderingBias="Performance" ShadowDepth="0" Storyboard.TargetProperty="BlurRadius"/>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <EventTrigger RoutedEvent="UIElement.MouseEnter">
                    <BeginStoryboard x:Name="TextBoxEffect">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" BeginTime="00:00:00" From="1" To="15" Duration="00:00:01" AutoReverse="True" RepeatBehavior="Forever"/>
                            <ColorAnimation Storyboard.TargetProperty="(Control.BorderBrush).(SolidColorBrush.Color)" BeginTime="00:00:00" From="Black" To="Red" Duration="00:00:01" AutoReverse="True" RepeatBehavior="Forever"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="UIElement.MouseLeave">
                    <StopStoryboard BeginStoryboardName="TextBoxEffect" />
                </EventTrigger>
            </Style.Triggers>
        </Style>
        <!-- ScrollBar -->
        <Style x:Key="simpleScrollBar" TargetType="{x:Type ScrollBar}">
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollBar}">
                        <Border BorderThickness="1" BorderBrush="Black">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="17"/>
                                </Grid.ColumnDefinitions>
                                <TextBox  x:Name="Text" Text="{Binding ValueText, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}, 
                                    UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Stretch"  
                                    FontSize="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}}" FontWeight="Bold" Width="94" KeyDown="Text_KeyDown"/>
                                <Grid Grid.Column="1" x:Name="GridRoot" HorizontalAlignment="Left" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" 
                                      Background="{TemplateBinding Background}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition MaxHeight="35"/>
                                        <RowDefinition Height="1.6"/>
                                        <RowDefinition MaxHeight="35"/>
                                    </Grid.RowDefinitions>
                                    <RepeatButton x:Name="DecreaseRepeat" Command="ScrollBar.LineDownCommand" Focusable="True">
                                        <Grid>
                                            <Path x:Name="DecreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 4 L 8 4 L 4 0 Z"/>
                                        </Grid>
                                    </RepeatButton>
                                    <RepeatButton Grid.Row="2" x:Name="IncreaseRepeat" Command="ScrollBar.LineUpCommand" Focusable="True">
                                        <Grid>
                                            <Path x:Name="IncreaseArrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 0 0 L 4 4 L 8 0 Z"/>
                                        </Grid>
                                    </RepeatButton>
                                </Grid>
                            </Grid>
                        </Border>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="simpleLabel" TargetType="{x:Type Label}">
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Foreground" Value="Blue"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="mySimpleListBox" TargetType="{x:Type ListBox}">
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="5" Rows="5" VerticalAlignment="Top" HorizontalAlignment="Left"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <StackPanel VerticalAlignment="Top" Orientation="Vertical" Background="LightGray" Width="171">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="30"/>
                                    <RowDefinition Height="14"/>
                                    <RowDefinition Height="30"/>
                                    <RowDefinition Height="20"/>
                                    <RowDefinition Height="14"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Row="0" Grid.ColumnSpan="2" Background="WhiteSmoke" Margin="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="1*"/>
                                        <ColumnDefinition Width="0.65*"/>
                                        <ColumnDefinition Width="0.35*"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock FontWeight="Bold" FontSize="22" Foreground="DarkBlue" Text="{Binding InstrumentID}"/>
                                    <TextBlock Foreground="Blue" VerticalAlignment="Bottom" FontSize="15" Grid.Column="1" Text="{Binding LastPrice}"/>
                                    <TextBlock VerticalAlignment="Bottom" Grid.Column="2" Text="{Binding Change}"/>
                                </Grid>
                                <Grid Grid.Row="1" Grid.ColumnSpan="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock FontWeight="Bold" FontSize="11"><Run Text="LOW:"/></TextBlock>
                                        <TextBlock Margin="2,0,0,0" FontSize="10" HorizontalAlignment="Left" Text="{Binding LowestPrice}" />
                                    </StackPanel>
                                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                                        <TextBlock FontWeight="Bold" FontSize="11"><Run Text="HIGH:"/></TextBlock>
                                        <TextBlock Margin="2,0,0,0" FontSize="10" HorizontalAlignment="Left" Text="{Binding HighestPrice}"/>
                                    </StackPanel>
                                </Grid>
                                <Button Grid.Row="2" Grid.Column="0" Grid.RowSpan="2" x:Name="btnBid" BorderThickness="0" Margin="2" Background="White" HorizontalContentAlignment="Left"  Click="OrderBtn_Click">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <TextBlock x:Name="listboxBtnBidPrice" Grid.Row="0" FontSize="20" VerticalAlignment="Center" Text="{Binding BidPrice1}" FontWeight="Bold"/>
                                        <TextBlock HorizontalAlignment="Left" Grid.Row="1" Text="{Binding BidSize1}"/>
                                    </Grid>
                                </Button>
                                <Button Grid.Row="2" Grid.Column="1" Grid.RowSpan="2" x:Name="btnAsk" BorderThickness="0" Margin="2" Background="White" HorizontalContentAlignment="Right"  Click="OrderBtn_Click">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition/>
                                            <RowDefinition/>
                                        </Grid.RowDefinitions>
                                        <TextBlock x:Name="listboxBtnAskPrice" HorizontalAlignment="Right" FontSize="20" VerticalAlignment="Center" Text="{Binding AskPrice1}" FontWeight="Bold"/>
                                        <TextBlock  HorizontalAlignment="Right" Grid.Row="1" Text="{Binding AskSize1}"/>
                                    </Grid>
                                </Button>
                                <ScrollBar Grid.Row="3" Grid.RowSpan="1" Grid.ColumnSpan="2" Value="1" Width="71" FontSize="10" HorizontalAlignment="Center" VerticalAlignment="Bottom" Style="{DynamicResource simpleScrollBar}" Maximum="99999" SmallChange="1"/>
                                <Grid  Grid.Row="4" Grid.ColumnSpan="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock FontWeight="Bold" FontSize="11"><Run Text="OI:"/></TextBlock>
                                        <TextBlock Margin="2,0,0,0" FontSize="10" Text="{Binding OpenInterest}"/>
                                    </StackPanel>
                                    <StackPanel Grid.Column="1" Orientation="Horizontal">
                                        <TextBlock FontSize="11" FontWeight="Bold" Grid.Column="1" Grid.Row="4"><Run Text="VOL:"/></TextBlock>
                                        <TextBlock Margin="2,0,0,0" FontSize="10" Grid.Column="1" Text="{Binding Volume}"/>
                                    </StackPanel>
                                </Grid>
                            </Grid>
                        </StackPanel>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleBtn1" TargetType="{x:Type ToggleButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Content" Value="自动"/>
                    <Setter Property="Foreground" Value="Red"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="false">
                    <Setter Property="Content" Value="开平"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ToggleBtn2" TargetType="{x:Type ToggleButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="{x:Null}" >
                    <Setter Property="Content" Value="DefQuant"/>
                    <Setter Property="Foreground" Value="Blue"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="false">
                    <Setter Property="Content" Value="Avail"/>
                    <Setter Property="Foreground" Value="Green"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Content" Value="Set"/>
                    <Setter Property="Foreground" Value="Red"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ToggleBtn3" TargetType="{x:Type ToggleButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="{x:Null}">
                    <Setter Property="Content" Value="限定价"/>
                    <Setter Property="Foreground" Value="Blue"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="false">
                    <Setter Property="Content" Value="对手价"/>
                    <Setter Property="Foreground" Value="Green"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Content" Value="排队价"/>
                    <Setter Property="Foreground" Value="Purple"/>
                </Trigger>
                <Trigger Property="Content" Value="市价">
                    <Setter Property="Foreground" Value="Purple"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RadioBtn0" TargetType="{x:Type RadioButton}">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Margin" Value="2,0,1,0"/>
            <Style.Triggers>
                <!--<Trigger Property="IsChecked" Value="true">
                    <Setter Property="Background" Value="Black"></Setter>
                    <Setter Property="FontWeight" Value="Bold"></Setter>
                </Trigger>-->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="Black"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Cursor" Value="Hand"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="自动"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--蓝色-->
                    <Setter Property="Foreground" Value="Blue"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="开仓"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--红色-->
                    <Setter Property="Foreground" Value="Red"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="投机"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--蓝色-->
                    <Setter Property="Foreground" Value="Blue"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="套保"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--红色-->
                    <Setter Property="Foreground" Value="Red"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="套利"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--绿色-->
                    <Setter Property="Foreground" Value="Green"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="预设"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Foreground" Value="Red"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="市价"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <Setter Property="Foreground" Value="Blue"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="对手"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--绿色-->
                    <Setter Property="Foreground" Value="Green"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="己方"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--紫色-->
                    <Setter Property="Foreground" Value="Purple"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="FOK"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--绿色-->
                    <Setter Property="Foreground" Value="Green"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsChecked" Value="true"/>
                        <Condition Property="Content" Value="FAK"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="FontWeight" Value="Bold"/>
                    <!--紫色-->
                    <Setter Property="Foreground" Value="Purple"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RadioBtn1" TargetType="{x:Type RadioButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Background" Value="Black"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RadioBtn2" TargetType="{x:Type RadioButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Background" Value="Green"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="RadioBtn3" TargetType="{x:Type RadioButton}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="true">
                    <Setter Property="Background" Value="Yellow"/>
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="{x:Type ContextMenu}" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border x:Name="Border" Background="White"  BorderThickness="1" BorderBrush="#FF385776">
                            <ItemsPresenter/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ProdcutMenuItem" TargetType="{x:Type MenuItem}" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Grid x:Name="grdContainer" MinWidth="80">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="80"/>
                            </Grid.ColumnDefinitions>
                            <Label x:Name="lblContent" Foreground="#FF385776" Width="80" Margin="00" HorizontalAlignment="Center" VerticalContentAlignment="Center" Content="{TemplateBinding Header}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <CollectionViewSource  x:Key="UnsettledOrdersGridSource1" Source="{Binding}" IsLiveFilteringRequested="True"/>

        <DataTemplate x:Key="DataTemplate1">
            <Grid MinWidth="100" MinHeight="38" Margin="0,-2,0,0">
                <!--<Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="50*"/>
                    <ColumnDefinition Width="50*"/>
                </Grid.ColumnDefinitions>-->
                <TextBlock x:Name="LeftText" Grid.Row="0" Grid.Column="0" Margin="0,0,0,0" TextAlignment="Left" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Transparent" FontSize="10" FontWeight="Light"
                    Text="{Binding LeftText, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"
                    Foreground="{Binding Leftground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"/>
                <TextBlock x:Name="RightText" Grid.Row="0" Grid.Column="1" Margin="0,0,0,0" TextAlignment="Right" HorizontalAlignment="Right" VerticalAlignment="Stretch" Background="Transparent" FontSize="10" FontWeight="Light"
                    Text="{Binding RightText, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"
                    Foreground="{Binding Rightground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"/>
                <!--<Line StrokeThickness="1" Fill="Red" Margin="0,13,0,0"></Line>-->
                <TextBlock x:Name="Content" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,9,0,0" HorizontalAlignment="Center" VerticalAlignment="Stretch" Background="Transparent"
                    Text="{Binding Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"
                    FontSize="{Binding FontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"
                    FontWeight="{Binding FontWeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"
                    Foreground="{Binding Midground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type lib:TQOrderBoardButton}}}"/>

            </Grid>
        </DataTemplate>

        <Style x:Key="ButtonFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <!--<Rectangle StrokeDashArray="1 2" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" Margin="2"/>-->
                        <Rectangle StrokeDashArray="1 2" StrokeThickness="1" Stroke="YellowGreen" SnapsToDevicePixels="true" Margin="2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#F3F3F3" Offset="0"/>
            <GradientStop Color="#EBEBEB" Offset="0.5"/>
            <GradientStop Color="#DDDDDD" Offset="0.5"/>
            <GradientStop Color="#CDCDCD" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="ButtonNormalBackgroundIsMouseOver" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#F3F0F3" Offset="0"/>
            <GradientStop Color="#EBC0EB" Offset="0.5"/>
            <GradientStop Color="#DDA0DD" Offset="0.5"/>
            <GradientStop Color="#CD70CD" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type lib:TQOrderBoardButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type lib:TQOrderBoardButton}">
                        <Themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderDefaulted="{TemplateBinding IsDefaulted}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Themes:ButtonChrome>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="RenderDefaulted" TargetName="Chrome" Value="true"/>
                            </Trigger>
                            <Trigger Property="ToggleButton.IsChecked" Value="true">
                                <Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Midground" Value="#ADADAD"/>
                                <Setter Property="Foreground" Value="#ADADAD"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="Content" Value="合约清仓"/>
                                    <Condition Property="IsEnabled" Value="true"/>
                                </MultiTrigger.Conditions>
                                <Setter  Property="Midground" Value="Black"/>
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="UIElement.IsMouseOver" Value="True">
                    <Setter Property="Border.Background" Value="{StaticResource ButtonNormalBackgroundIsMouseOver}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="400*" MinHeight="120"/>
            <RowDefinition Height="3*" />
            <RowDefinition Height="240" MinHeight="240" />           
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" HorizontalAlignment="Stretch">
            <Grid.RowDefinitions>
                <RowDefinition Height="28" MaxHeight="28" MinHeight="28"/>
                <RowDefinition Height="70" MaxHeight="88" MinHeight="45"/>
                <RowDefinition MinHeight="30"/>
            </Grid.RowDefinitions>
            <Grid Grid.Row="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="300"/>
                </Grid.ColumnDefinitions>
                <Menu MinWidth="180" VerticalAlignment="Center" Grid.Row="0" Grid.Column="0" >
                    <MenuItem Header="System(_S)" x:Name="miAccount">
                        <MenuItem x:Name="EnqTradingAccount" Header="AccountInfo(_I)" HorizontalAlignment="Left" Width="170" Click="EnqTradingAccount_Click"/>
                        <MenuItem x:Name="PasswordUpdate" Header="Password(_P)" HorizontalAlignment="Left" Width="170" Click="PasswordUpdate_Click"/>
                        <MenuItem x:Name="Relogin" Header="Relogin(_R)" HorizontalAlignment="Left" Width="170" Click="Relogin_Click"/>
                        <MenuItem x:Name="SwitchAccount" Header="SwitchAccount(_S)" HorizontalAlignment="Left" Width="170" Click="SwitchAccount_Click"/>
                        <Separator HorizontalAlignment="Left" Height="1" Width="170"/>
                        <MenuItem x:Name="EnqHistoricalSettlementInfo" Header="HistLedger" HorizontalAlignment="Left" Width="170" Click="EnqHistoricalSettlementInfo_Click"/>
                        <MenuItem x:Name="EnqControlCenter" Header="ControlCenter" HorizontalAlignment="Left" Width="175" Click="EnqControlCenter_Click" />
                        <Separator HorizontalAlignment="Left" Height="1" Width="170"/>
                        <MenuItem Header="Lock(_L)" HorizontalAlignment="Left" Width="170"/>
                        <MenuItem Header="Quit(_X)" HorizontalAlignment="Left" Width="170" Click="Exit"/>
                    </MenuItem>
                    <MenuItem Header="Setting(_O)" x:Name="option">
                        <MenuItem Header="ExpressSetting" HorizontalAlignment="Left" Width="180"/>
                        <Separator HorizontalAlignment="Left" Height="1" Width="180"/>
                        <MenuItem Header="SaveSetting" x:Name="miSaveConfiguration" HorizontalAlignment="Left" Width="180" Click="miSaveConfiguration_Click"/>
                        <MenuItem Header="LoadConfiguration" x:Name="miLoadConfiguration" HorizontalAlignment="Left" Width="180" Click="miLoadConfiguration_Click">
                            <MenuItem Header="Loading..."/>
                        </MenuItem>
                        <Separator HorizontalAlignment="Left" Height="1" Width="180"/>
                        <MenuItem Header="DispMultMarketData" HorizontalAlignment="Left" Width="180"/>
                        <Separator HorizontalAlignment="Left" Height="1" Width="180"/>
                        <MenuItem  Header="DefaultQuant" x:Name="miDefaultQuant" HorizontalAlignment="Left" Width="180" Click="miDefaultQuant_Click"/>
                        <MenuItem  Header="Settings" HorizontalAlignment="Left" Width="180" Click="OptionSettings_Click"/>
                    </MenuItem>
                    <MenuItem Header="Transfer(_T)" x:Name="transfermoney">
                        <MenuItem Header="ContractSwitch" x:Name="MovingForwardPosition" Click="PositionMovingForward_Click"/>
                        <MenuItem Header="InternalTransfer" HorizontalAlignment="Left" Height="30" Width="144" Click="InternalTransfer_Click"/>
                    </MenuItem>
                    <MenuItem Header="StrategyAndRiskMonitoring(_S)" x:Name="StrategyWindow">
                        <MenuItem x:Name="StrategyTrading" Header="StrategyTrading" HorizontalAlignment="Left" Width="138" Click="StrategyWin_Click"/>
                        <MenuItem x:Name="RiskManagement" Header="RiskMonitoring" HorizontalAlignment="Left" Width="138"/>
                    </MenuItem>
                    <MenuItem Header="Report(_R)" x:Name="Report">
                        <MenuItem Header="AccountReport" HorizontalAlignment="Left" Width="170"/>
                    </MenuItem>
                    <MenuItem Header="Enquiry(_Q)" x:Name="miQuery">
                        <MenuItem x:Name="EnqInstruments" Header="EnqInstruments" HorizontalAlignment="Left" Width="175" Click="EnqInstruments_Click"/>
                        <MenuItem x:Name="EnqPositions" Header="EnqPositions" HorizontalAlignment="Left" Width="150" Click="EnqPositions_Click"/>
                        <MenuItem x:Name="EnqTrades" Header="EnqTrades" HorizontalAlignment="Left" Width="150" Click="EnqTrades_Click"/>
                        <MenuItem x:Name="EnqOrders" Header="EnqOrder" HorizontalAlignment="Left" Width="150" Click="EnqOrders_Click"/>
                        <MenuItem x:Name="miQryTradeLog" Header="EnqHistoricTrade" HorizontalAlignment="Left" Width="170" Click="miQryTradeLog_Click"/>
                        <MenuItem x:Name="miQryInstMgr" Header="EnqFeeRate" HorizontalAlignment="Left" Width="170"/>
                        <MenuItem x:Name="miQryInstCommission" Header="EnqTransactionFees" HorizontalAlignment="Left" Width="170"/>
                    </MenuItem>
                    <MenuItem Header="Help(_H)" x:Name="Help">
                        <MenuItem x:Name="miInstructions" Header="Manual" HorizontalAlignment="Left" Width="175" Click="miInstructions_Click" />
                        <MenuItem Header="Report" x:Name="miErrorReport" HorizontalAlignment="Left" Width="175" Click="miErrorReport_Click"/>
                        <Separator HorizontalAlignment="Left" Height="1" Width="170"/>
                        <MenuItem Header="About(_A)" HorizontalAlignment="Left" Width="170" Click="AboutTQ_Click">
                            <MenuItem.Icon>?</MenuItem.Icon>
                        </MenuItem>
                    </MenuItem>
                </Menu>
                <Grid Grid.Row="0" Grid.Column="1">
                </Grid>
            </Grid>
            <Grid Grid.Row="1">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="6*"/>
                    <ColumnDefinition Width="4*"/>
                </Grid.ColumnDefinitions>
                <DataGrid  x:Name="AccountDataGrid"  Grid.Column="0" Visibility="Visible" IsReadOnly="True" Foreground="Black"
                        AutoGenerateColumns="False" ItemsSource="{Binding}" VerticalAlignment="Stretch" HorizontalAlignment="Left" VerticalScrollBarVisibility = "Visible">
                    <DataGrid.ContextMenu>
                        <ContextMenu  StaysOpen="true">
                            <MenuItem Header="AutoAdjustColumnWidth"/>
                            <MenuItem x:Name="AccountDataGridColumnSet" Header="ColumnSetting" Click="AccountDataGridColumnSet_Click"  />
                        </ContextMenu>
                    </DataGrid.ContextMenu>
                </DataGrid>
                <Grid Grid.Column="2" x:Name="OutsideInfo" HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="10*"/>
                        <ColumnDefinition Width="10*"/>
                        <ColumnDefinition Width="10*"/>
                        <ColumnDefinition Width="10*"/>
                    </Grid.ColumnDefinitions>                    
                    <Button Grid.Column="2" x:Name="btnRefreshAccount" FontSize="16" Content="RefreshAccount" Width="60" Height="40" Click="btnRefreshAccount_Click" />
                    <Button Grid.Column="3" x:Name="btnQryAccount" FontSize="16" Content="EnqAccount" Width="60" Height="40" Click="btnQryAccount_Click"/>
                </Grid>
            </Grid>
            <TabControl MinWidth="350" BorderThickness="0" Grid.Row="2" Grid.ColumnSpan="2" x:Name="tbctrl1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                    Background="Azure">
                <TabItem x:Name="tabOfferingList" Header="MarketDataForm(F1)" Margin="-6,0,1.5,-2" >
                    <DataGrid x:Name="MarketDataGrid" Background="Black" BorderThickness="1" BorderBrush="Black" ItemsSource="{Binding}" SelectedItem="{Binding CurrentMarketData}" SelectedIndex="0" AutoGenerateColumns="False" IsReadOnly="True"
                                  GridLinesVisibility="Vertical" Focusable="True" SelectionMode="Single" SelectionUnit="FullRow" CanUserSortColumns="False" 
                               RowBackground="LightYellow" AlternatingRowBackground="BlanchedAlmond"
                                  PreviewMouseDoubleClick="MarketDataGrid_PreviewMouseDoubleClick" VerticalAlignment="Stretch" FontSize="14" FontWeight="Bold" FontFamily="Modern No. 20">                     

                        <DataGrid.ContextMenu>
                            <ContextMenu x:Name="Dgmenu1" StaysOpen="true">
                                <MenuItem x:Name="miSelectCustCntrGrp" Header="SelectContractGroup" MouseEnter="miSelectCustCntrGrp_MouseEnter" />
                                <MenuItem Header="Settingup" Click="MultipleSetup_Click"/>
                                <Separator/>
                                <MenuItem x:Name="MarketDataAutoAdjustColumnWidth" Header="AutoAdjustColumnWidth" Click="MarketDataAutoAdjustColumnWidth_Click" />
                                <MenuItem Header="OutputColumnList"/>
                                <MenuItem x:Name="MarketDataColumnSet" Header="ColumnSetting" Click="MarketDataColumnSet_Click"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </TabItem>
                <TabItem x:Name="tab2" Header="MarketDataBox">
                    <ListBox x:Name="MarketDataListBox" Style="{DynamicResource mySimpleListBox}" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                            ItemsSource="{Binding}" SelectionChanged="MarketDataListBox_SelectionChanged">
                        <ListBox.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="SettingCustomSymbol"/>
                                <Separator/>
                                <MenuItem Header="AutoAdjustColumnWidth"/>
                            </ContextMenu>
                        </ListBox.ContextMenu>
                    </ListBox>

                </TabItem>
                <TabItem x:Name="tabInstrumentList" Header="SymbolList(F2)" Margin="-2,1,-2,-1">
                    <DataGrid x:Name="InstrumentDataGrid" Visibility="Visible" AutoGenerateColumns="false" ItemsSource="{Binding}" IsReadOnly="True" GridLinesVisibility="None" Focusable="True" HorizontalContentAlignment="Center" HorizontalAlignment="Stretch" SelectionMode="Single" SelectionUnit="FullRow" RowBackground="Azure">
                        <DataGrid.ContextMenu>
                            <ContextMenu x:Name="dgmenu2" StaysOpen="true">
                                <MenuItem Header="AutoAdjustColumnWidth"/>
                                <MenuItem Header="OutputColumnList"/>
                                <MenuItem x:Name="InstrumentListColumnSet" Header="ColumnSetting" Click="InstrumentListColumnSet_Click"/>
                            </ContextMenu>
                        </DataGrid.ContextMenu>
                    </DataGrid>
                </TabItem>
            </TabControl>
        </Grid>
        <GridSplitter Grid.Row="1" Grid.RowSpan="1" ResizeDirection="Rows" Height="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" />
        <Grid Grid.Row="2" x:Name="Grid2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="col0" MinWidth="440" Width="440"/>                
                <ColumnDefinition x:Name="col2" MinWidth="300"/>
            </Grid.ColumnDefinitions>
            <TabControl x:Name="OrderBoardTabCtrl" BorderThickness="0" VerticalAlignment="Top" HorizontalAlignment="Left"  Grid.Column="0" Width="440" 
                        MinWidth="440" MinHeight="240" KeyDown="OrderBoardTabCtrl_KeyDown" SelectionChanged="OrderBoardTabCtrl_SelectionChanged" >
                <TabItem  x:Name="tabStardOrderBoard" Header="TradeExpress(Home)">
                    <Grid x:Name="gridOrderBoard" MaxWidth="510" MinWidth="440" MaxHeight="400" MinHeight="210">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="32*"/>
                            <RowDefinition Height="32*"/>
                            <RowDefinition Height="32*"/>
                            <RowDefinition Height="32*"/>
                            <RowDefinition Height="32*"/>
                            <RowDefinition Height="40*"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="76*"/>
                            <ColumnDefinition Width="200*"/>
                            <ColumnDefinition Width="25*"/>
                            <ColumnDefinition Width="25*"/>
                            <ColumnDefinition Width="100*"/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="2" VerticalAlignment="Center" TextAlignment="Center" Text="Name" FontWeight="Bold" FontSize="16" Height="22" Margin="1,6" Grid.ColumnSpan="2"/>
                        <TextBlock Grid.Row="0" Grid.Column="4" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center" Background="Azure"
                            Margin="0,1,-40,1" FontWeight="Bold" FontSize="18" Width="160" Height="32"/>
                        <TextBlock x:Name="txtBlkTradeName" Text="{Binding CurrentMarketData.OrderBoardTradeName}" ToolTip="{Binding CurrentMarketData.OrderBoardTradeName}"
                            Grid.Row="0" Grid.Column="4" HorizontalAlignment="Left" VerticalAlignment="Center" TextAlignment="Center" Background="Azure"
                            Margin="0,4" FontWeight="Bold" FontSize="18" Width="102" Height="26"/>
                        <TextBlock Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" TextAlignment="Left" Margin="3,6,0,6" Text="Symbol" FontWeight="Bold" FontSize="16" Height="22"/>
                        <TextBox x:Name="txtBoxInstrumentID" Text="{Binding CurrentMarketData.InstrumentID}" ToolTip="{Binding CurrentMarketData.InstrumentID}"
                            Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="1" MinWidth="116" BorderThickness="2" HorizontalAlignment="Left" VerticalAlignment="Center"
                            FontWeight="Bold" FontSize="18" Height="32" GotMouseCapture="txtInstrumentID_GotMouseCapture" MouseEnter="txtBoxInstrumentID_MouseEnter" Margin="0,1" Width="198"/>
                        <Popup HorizontalAlignment="Left" x:Name="popProduct" Width="210" IsOpen="False" AllowsTransparency="True" PopupAnimation="Slide" PlacementTarget="{Binding ElementName=txtBoxInstrumentID}" Placement="Bottom" MouseLeave="popProduct_MouseLeave" HorizontalOffset="-10" Grid.ColumnSpan="2" Margin="0,0,0,40" Grid.RowSpan="6">
                            <ScrollViewer Width="210" Background="SkyBlue" x:Name="svProduct">
                                <Grid Width="210" x:Name="gridProduct"/>
                            </ScrollViewer>
                        </Popup>

                        <Popup HorizontalAlignment="Left" x:Name="popInstrument" Width="100" IsOpen="False" AllowsTransparency="True" PopupAnimation="Slide" PlacementTarget="{Binding ElementName=txtBoxInstrumentID}" Placement="Bottom" MouseLeave="popInstrument_MouseLeave" HorizontalOffset="0" Grid.ColumnSpan="2" Margin="0,0,0,18" Grid.RowSpan="5">
                            <ScrollViewer Width="100" Background="SkyBlue" x:Name="svInstrument">
                                <Grid Width="100" x:Name="gridInstrument"/>
                            </ScrollViewer>
                        </Popup>
                        <!--TextBlock x:Name="tradeoffsettype" Text="{Binding CurrentMarketData.OrderBoardOrderMode, Converter={StaticResource OrderBoardOrderModeTextConverter1}, Mode=OneWay}" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center" TextAlignment="Left" Margin="3,7,0,5" FontSize="16" FontWeight="Bold" Height="22"/-->
                        <TextBlock Grid.Row="1" Grid.Column="0" TextAlignment="Left" VerticalAlignment="Center" FontSize="13" FontWeight="Bold" Text="HedgeRatio" Height="22" Margin="0,7,0,5" Grid.ColumnSpan="2" RenderTransformOrigin="0.51,0.773"/>

                        <StackPanel Grid.Row="1" Grid.Column="1" Margin="8,9,1,7" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left" Height="18" Width="98">
                            <RadioButton x:Name="TenHedgeBtn" IsChecked="{Binding CurrentMarketData.OrderBoardHedgeRatio, ConverterParameter=Ten, Converter={StaticResource OrderBoardHedgeRatioConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="10" Width="38"/>
                            <RadioButton x:Name="TwentyHedgeBtn" IsChecked="{Binding CurrentMarketData.OrderBoardHedgeRatio, ConverterParameter=Twenty, Converter={StaticResource OrderBoardHedgeRatioConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="20" RenderTransformOrigin="0.781,0.386" Width="38">
                                <RadioButton.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="0.324"/>
                                        <TranslateTransform X="0.011" Y="0.053"/>
                                    </TransformGroup>
                                </RadioButton.RenderTransform>
                            </RadioButton>
                        </StackPanel>
                        <TextBlock Grid.Row="2" Grid.RowSpan="1" VerticalAlignment="Center" TextAlignment="Left" Margin="3,7,0,7" FontSize="16" FontWeight="Bold" Height="20" Text="PringMode" />
                        <StackPanel Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Left" Height="16" Margin="0,9" Width="268">
                            <RadioButton x:Name="MarketBtn" IsChecked="{Binding CurrentMarketData.OrderBoardPricingMode, ConverterParameter=Market, Converter={StaticResource OrderBoardPricingModeConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="Market" Height="16" VerticalAlignment="Top"/>
                            <RadioButton x:Name="PresetBtn" IsChecked="{Binding CurrentMarketData.OrderBoardPricingMode, ConverterParameter=Preset, Converter={StaticResource OrderBoardPricingModeConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="Preset"/>
                            <RadioButton x:Name="OppositeBtn" IsChecked="{Binding CurrentMarketData.OrderBoardPricingMode, ConverterParameter=OppositePlus, Converter={StaticResource OrderBoardPricingModeConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="Opposite"/>
                            <RadioButton x:Name="OwnsiteBtn" IsChecked="{Binding CurrentMarketData.OrderBoardPricingMode, ConverterParameter=Ownside, Converter={StaticResource OrderBoardPricingModeConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="Queue"/>
                            <RadioButton x:Name="MiddlePriceBtn" IsChecked="{Binding CurrentMarketData.OrderBoardPricingMode, ConverterParameter=MiddlePrice, Converter={StaticResource OrderBoardPricingModeConverter1}}" Style="{DynamicResource RadioBtn0}" Grid.Row="1" Content="Middle"/>
                        </StackPanel>
                        <TextBlock Grid.Row="3" Grid.RowSpan="1" VerticalAlignment="Center" TextAlignment="Left" Margin="3,7,0,7" FontSize="16" FontWeight="Bold" Height="20"><Run Text="Price"/></TextBlock>
                        <ToggleButton x:Name="tglbtnQuantMode" Grid.Row="4" IsThreeState="True" IsChecked="{Binding CurrentMarketData.OrderBoardQuantMode, Converter={StaticResource OrderBoardQuantModeConverter1}}" Style="{DynamicResource ToggleBtn2}"
                            VerticalAlignment="Center" HorizontalAlignment="Left"
                            FontSize="14" Height="32" Width="66" Margin="1,1,0,1" Click="tglbtnQuantMode_Click"/>
                        <!--ToggleButton Visibility="Visible" x:Name="tglbtnPriceMode"
                            Grid.Row="3" IsThreeState="True" Style="{DynamicResource ToggleBtn3}"  VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"
                            Click="tglbtnPriceMode_Click" Height="22" Width="52" Margin="12,6"/-->
                        <!--IsChecked="{Binding CurrentMarketData.OrderBoardPriceModeCheckedValue }"-->

                        <Grid Grid.Row="3" Grid.Column="1" Grid.RowSpan="3"  Grid.ColumnSpan="4" Margin="0,0,0,41">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="35*"/>
                                <RowDefinition Height="35*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="18*"/>
                                <ColumnDefinition Width="13*"/>
                                <ColumnDefinition Width="65*"/>
                                <ColumnDefinition Width="19*"/>
                                <ColumnDefinition Width="24*"/>
                                <ColumnDefinition Width="223*"/>
                            </Grid.ColumnDefinitions>
                            <lib:TQScrollBar x:Name="scrollbarPrice"  Value="{Binding CurrentMarketData.OrderBoardPrice}" ValueText="{Binding CurrentMarketData.OrderBoardPrice, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}"
                                Style="{DynamicResource simpleScrollBar}" SmallChange="{Binding CurrentMarketData.PriceTick}" ValueChanged="TQScrollValueChanged" KeyDown="Text_KeyDown"
                                lib:TQScrollBar.AutoSelectAllOnMouseMove="False" FontSize="20" Grid.Row="0" Grid.Column="0" Minimum="-999999.9999" Maximum="999999.9999" Scroll="scrollbarPrice_Scroll" Grid.ColumnSpan="4" MouseEnter="scrollbarPrice_MouseEnter"
                               />
                            <lib:TQScrollBar1 x:Name="scrollbarNum" Value="{Binding  CurrentMarketData.OrderBoardQuant}" ValueText="{Binding CurrentMarketData.OrderBoardQuant, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, NotifyOnSourceUpdated=True}" Style="{DynamicResource simpleScrollBar}" SmallChange="1"
                                lib:TQScrollBar1.AutoSelectAllOnMouseMove="False" FontSize="20" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Stretch" Minimum="1" Maximum="999999" Height="35" Margin="0,0,0,0" Grid.ColumnSpan="4"/>

                            <Grid Grid.Column="4" Grid.RowSpan="2" x:Name="bidaskGrid" Grid.ColumnSpan="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="10*"/>
                                    <RowDefinition Height="14*"/>
                                    <RowDefinition Height="14*"/>
                                    <RowDefinition Height="10*"/>
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="25"/>
                                    <ColumnDefinition Width="35"/>
                                    <ColumnDefinition Width="60"/>
                                    <ColumnDefinition Width="10"/>
                                    <ColumnDefinition Width="45"/>
                                </Grid.ColumnDefinitions>
                                <Button Name="Plus12" Content="P+"  FontSize="10" Grid.Column="0" Click="Plus12_Click"/>
                                <Button Name="Minus12" Content="P-" Grid.Row="1" FontSize="10" Click="Minus12_Click"/>
                                <Button Name="IncreaseQuant" Content="Q+" FontSize="10" Grid.Row="2" Click="IncreaseQuant_Click" />
                                <Button Name="ReduceQuant" Content="Q-" FontSize="10" Grid.Row="3" Click="ReduceQuant_Click" />
                                <!--TextBlock HorizontalAlignment="Center"  VerticalAlignment="Center" Text="↑" Grid.Row="0" FontSize="10" FontWeight="Bold"/-->
                                <TextBlock HorizontalAlignment="Center"  VerticalAlignment="Center" Grid.Column="1" Text="Short" Grid.Row="1" FontSize="16" />
                                <TextBlock HorizontalAlignment="Center"  VerticalAlignment="Center" Grid.Column="1" Text="Long" Grid.Row="2" FontSize="16" />
                                <TextBlock x:Name="txtblkAskPrice1" FontSize="14" HorizontalAlignment="Left" Text="{Binding CurrentMarketData.AskPrice1}" Grid.Column="2" Grid.Row="1" MouseEnter="txtblkAskPrice_MouseEnter"/>
                                <TextBlock x:Name="txtblkBidPrice1" FontSize="14" HorizontalAlignment="Left" Text="{Binding CurrentMarketData.BidPrice1}" Grid.Column="2" Grid.Row="2" MouseEnter="txtblkBidPrice_MouseEnter"/>
                                <TextBlock HorizontalAlignment="Center" Text="/" Grid.Column="3" Grid.Row="1" FontWeight="Bold"/>
                                <TextBlock HorizontalAlignment="Center" Text="/" Grid.Column="3" Grid.Row="2" FontWeight="Bold"/>
                                <TextBlock x:Name="txtblkBidSize1" Text="{Binding CurrentMarketData.BidSize1}" HorizontalAlignment="Center" Grid.Column="4" Grid.Row="2"/>
                                <TextBlock x:Name="txtblkAskSize1" Text="{Binding CurrentMarketData.AskSize1}" HorizontalAlignment="Center" Grid.Column="4" Grid.Row="1"/>
                            </Grid>
                        </Grid>
                        <StackPanel Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="5" Orientation="Horizontal" HorizontalAlignment="Stretch" Margin="0,33,0,0" Grid.RowSpan="2">
                            <!--lib:TQOrderBoardButton x:Name="ClosePosBtn" Width="115" Margin="1,2,1,0" FontSize="20" Grid.Row="5" Grid.RowSpan="3" Grid.Column="4" FontWeight="Bold" Content="合约清仓" ToolTip="对该合约所有仓位进行平仓"                                                   IsEnabled="{Binding CurrentMarketData.OrderBoardAvailablePosition}" ContentTemplate="{DynamicResource DataTemplate1}" Style="{DynamicResource ButtonStyle1}"
                            LeftText="{Binding CurrentMarketData.OrderBoardLongPositionQuant}" RightText="{Binding CurrentMarketData.OrderBoardShortPositionQuant}" Foreground="Black" Leftground="Red" Rightground="Green"/-->
                            <lib:TQOrderBoardButton x:Name="LongBtn" Width="115" Margin="1,2,1,0" FontSize="20" FontWeight="ExtraBold" Click="OrderBtn_Click"
                                                    ContentTemplate="{DynamicResource DataTemplate1}" Style="{DynamicResource ButtonStyle1}" Content="Long" LeftText="{Binding CurrentMarketData.OrderBoardLongPrice}" Midground="Red" Leftground="Red" Rightground="Red"/>
                            <!--Content="{Binding CurrentMarketData.OrderBoardLongButtonContent}"-->
                            <lib:TQOrderBoardButton x:Name="ShortBtn" Width="115" Margin="1,2,1,0" FontSize="20" FontWeight="ExtraBold" Click="OrderBtn_Click"
                                                    ContentTemplate="{DynamicResource DataTemplate1}" Style="{DynamicResource ButtonStyle1}" Content="Short" LeftText="{Binding CurrentMarketData.OrderBoardShortPrice}" Midground="Green"  Leftground="Green" Rightground="Green"/>
                            <Button x:Name="StrategyBtn" Margin="1,2,1,0" Width="80" FontSize="14" Click="StrategyWin_Click" Content="StrategyTrade"/>
                        </StackPanel>
                    </Grid>

                </TabItem>
            </TabControl>           
            <Grid Grid.Column="1">
                <TabControl BorderThickness="0" x:Name="tbctrl2">
                    <TabItem x:Name="tabUnsettledOrder" Header="Unfilled(F5)">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="359*"/>
                                <ColumnDefinition MaxWidth="50" MinWidth="50" Width="50"/>
                            </Grid.ColumnDefinitions>
                            <DataGrid Visibility="Visible" x:Name="UnsettledOrdersGrid" AutoGenerateColumns="False" Foreground="Black"
                                ItemsSource="{Binding}" VerticalScrollBarVisibility="Auto"
                                IsReadOnly="True" GridLinesVisibility="None" Focusable="True"  SelectionUnit="FullRow" Grid.RowSpan="2" Grid.ColumnSpan="3" >
                                <DataGrid.RowStyle>
                                    <Style TargetType="{x:Type DataGridRow}">
                                        <Setter Property="Visibility" Value="{Binding UnsettledOrderVisibility}"/>
                                    </Style>
                                </DataGrid.RowStyle>
                                <DataGrid.ContextMenu>
                                    <ContextMenu  StaysOpen="true">
                                        <MenuItem Header="自动调整列宽"/>
                                        <MenuItem x:Name="UnSettledOrderColumnSet" Header="表格列设置" Click="UnsettledOrderColumnSet_Click"  />
                                    </ContextMenu>
                                </DataGrid.ContextMenu>

                            </DataGrid>
                            <Grid Grid.Column="1" Grid.RowSpan="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="50*"/>
                                    <RowDefinition Height="50*"/>
                                </Grid.RowDefinitions>
                                <Button x:Name="btnOrderCancel" Click="btnOrderCancel_Click" Content="Cancel"/>
                                <Button x:Name="btnOrdersCancel" Grid.Row="1" Click="btnOrdersCancel_Click" Content="CancelAll"/>
                            </Grid>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabAllOrder" Header="AllOrders(F6)" Height="23" VerticalAlignment="Top">
                        <Grid>
                            <DataGrid Visibility="Visible" x:Name="TodayOrdersGrid" AutoGenerateColumns="False" Foreground="Black" ItemsSource="{Binding}" HorizontalScrollBarVisibility="Auto"
                                IsReadOnly="True" GridLinesVisibility="None" Focusable="True" SelectionMode="Single" SelectionUnit="FullRow" Grid.RowSpan="2">
                                <DataGrid.ContextMenu>
                                    <ContextMenu  StaysOpen="true">
                                        <MenuItem Header="自动调整列宽"/>
                                        <MenuItem x:Name="TodayOrdersColumnSet" Header="表格列设置" Click="TodayOrdersColumnSet_Click" />
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                            </DataGrid>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabSettledOrder" Header="Filled(F7)">
                        <DataGrid Foreground="Black" x:Name="SettledOrdersGrid" AutoGenerateColumns="False" ItemsSource="{Binding}" IsReadOnly="True" GridLinesVisibility="None" Focusable="True" SelectionMode="Single" SelectionUnit="FullRow">
                            <DataGrid.RowStyle>
                                <Style TargetType="{x:Type DataGridRow}">
                                    <Setter Property="Visibility" Value="{Binding SettledOrderVisibility}"/>
                                </Style>
                            </DataGrid.RowStyle>
                            <DataGrid.ContextMenu>
                                <ContextMenu  StaysOpen="true">
                                    <MenuItem Header="自动调整列宽"/>
                                    <MenuItem x:Name="SettledOrderColumnSet" Header="表格列设置" Click="SettledOrderColumnSet_Click" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                        </DataGrid>
                    </TabItem>
                    <TabItem x:Name="tabCanceledOrders" Header="Cancel/Error(F8)">
                        <DataGrid Foreground="Black" x:Name="CanceledOrdersGrid" AutoGenerateColumns="False" ItemsSource="{Binding}" IsReadOnly="True" GridLinesVisibility="None" Focusable="True" SelectionMode="Single" SelectionUnit="FullRow">
                            <DataGrid.RowStyle>
                                <Style TargetType="{x:Type DataGridRow}">
                                    <Setter Property="Visibility" Value="{Binding CanceledOrderVisibility}"/>
                                </Style>
                            </DataGrid.RowStyle>
                            <DataGrid.ContextMenu>
                                <ContextMenu  StaysOpen="true">
                                    <MenuItem Header="自动调整列宽"/>
                                    <MenuItem x:Name="CanceledOrdersColumnSet" Header="表格列设置" Click="CanceledOrdersColumnSet_Click" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                        </DataGrid>
                    </TabItem>
                    <TabItem x:Name="tabTradeRecord" Header="TradeDetails(F4)">
                        <DataGrid x:Name="TradeRecordDetailsGrid" AutoGenerateColumns="False" Foreground="Black" ItemsSource="{Binding}" HorizontalScrollBarVisibility="Auto"
                            IsReadOnly="True" GridLinesVisibility="None" Focusable="True" SelectionMode="Single" SelectionUnit="FullRow" Grid.ColumnSpan="3">
                            <DataGrid.ContextMenu>
                                <ContextMenu  StaysOpen="true">
                                    <MenuItem Header="自动调整列宽"/>
                                    <MenuItem x:Name="TradeRecordDetailsColumnSet" Header="表格列设置" Click="TradeRecordDetailsColumnSet_Click" />
                                </ContextMenu>
                            </DataGrid.ContextMenu>
                        </DataGrid>
                    </TabItem>
                    <TabItem x:Name="tabSummary" Header="PositionSummary" GotFocus="tabPosition_GotFocus">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="159*"/>
                                <ColumnDefinition Width="12*"/>
                            </Grid.ColumnDefinitions>
                            <DataGrid x:Name="PositionSummaryGrid" AutoGenerateColumns="False" Foreground="Black" ItemsSource="{Binding}"
                            IsReadOnly="True" GridLinesVisibility="None" Focusable="True" SelectionMode="Single" SelectionUnit="FullRow" Grid.ColumnSpan="3"
                            CurrentCellChanged="DataGrid_CurrentCellChanged">
                                <DataGrid.ContextMenu>
                                    <ContextMenu  StaysOpen="true">
                                       
                                        <MenuItem Header="自动调整列宽"/>
                                        <MenuItem x:Name="BriefPositionGridColumnSet" Header="表格列设置" Click="PositionSummaryGridColumnSet_Click" />
                                    </ContextMenu>
                                </DataGrid.ContextMenu>
                            </DataGrid>
                            <Grid Grid.Column="0" Name="spPositionOper">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <Button x:Name="btnMovingForward"  Grid.Row="0" VerticalAlignment="Center" HorizontalAlignment="Left" Content="移仓" Click="PositionMovingForward_Click" />
                                <Button x:Name="btnMarketPriceClose" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Left" Content="市价平仓" Click="btnMarketPriceClose_Click"/>
                                <Button x:Name="btnMarketPriceReverse" Grid.Row="2" VerticalAlignment="Center" HorizontalAlignment="Left" Content="市价反手" Click="btnMarketPriceReverse_Click"/>
                            </Grid>
                        </Grid>
                    </TabItem>
                    <TabItem x:Name="tabTradeLog" Header="TradeLog">
                        <TextBox Name="TradeLog" IsReadOnly="True" HorizontalScrollBarVisibility="Auto" Text="{Binding TradeLogs, UpdateSourceTrigger=PropertyChanged}" FontSize="10" Margin="5" 
                             FontStyle="Normal" VerticalScrollBarVisibility="Auto"  HorizontalAlignment="Stretch">
                        </TextBox>
                    </TabItem>
                    <TabItem x:Name="tabGeneralLog" Header="SystemLog">
                        <TextBox Name="SystemLog" IsReadOnly="True"  FontSize="10"  Text="{Binding SystemLogs, UpdateSourceTrigger=PropertyChanged}" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"  VerticalAlignment="Stretch"  
                             HorizontalAlignment="Stretch"/>
                    </TabItem>
                    <TabItem x:Name="tabDebugLog" Header="DebugLog">
                        <TextBox Name="DebugLog" IsReadOnly="True" FontSize="10"  Text="{Binding DebugLogs, UpdateSourceTrigger=PropertyChanged}" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto"  VerticalAlignment="Stretch"  
                             HorizontalAlignment="Stretch"/>
                    </TabItem>
                </TabControl>
            </Grid>
        </Grid>        
    </Grid>
    
</Window>
