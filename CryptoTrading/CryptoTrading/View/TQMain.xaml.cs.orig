using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.IO;
using System.Media;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Input;
using System.Xml;
using System.Linq;
using System.Windows.Threading;
using TQ_Quote;
using System.Timers;
using TickQuant.Model;
using TickQuant.ViewModel;
using TickQuant.TQClass;
using TickQuant.TQLib;
using System.ComponentModel;
using System.Text;
using TickQuant.View;

namespace TickQuant
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class TQMain : Window
    {
        public static System.Diagnostics.Stopwatch StopwatchTest = new System.Diagnostics.Stopwatch();
        public static Trade T;
        public static Quote Q;
        public LoginWindow LoginWindow;
        public static LoginConfiguration LoginConfig;
        public ConcurrentQueue<MarketData> QTicks = new ConcurrentQueue<MarketData>();
        private bool investorIsLogined = false;//投资者是否登录，切换账户时，需要重置(主要用来判断是否请求查询交易费、保证金)

        #region DataGridView classes
        public readonly ObservableCollection<MarketData> MarketDataView = new ObservableCollection<MarketData>();
        public readonly ObservableCollection<TradingAccountData> TradingAccountDataView = new ObservableCollection<TradingAccountData>();
        public readonly TQObservableCollection<OrderData> OrderDataView = new TQObservableCollection<OrderData>();
        public readonly ObservableCollection<OrderData> ParkedOrderView = new ObservableCollection<OrderData>();
        public readonly ObservableCollection<TradeField> TradeDataView = new ObservableCollection<TradeField>();
        public readonly ObservableCollection<TradeDataSummary> TradeDataSummaryView = new ObservableCollection<TradeDataSummary>();
        //public readonly List<InstrumentData> InstrumentList = new List<InstrumentData>();
        public readonly ObservableCollection<PositionDetail> PositionDetailView = new ObservableCollection<PositionDetail>();
        public readonly ObservableCollection<PositionDataSummary> PositionDataSummaryView = new ObservableCollection<PositionDataSummary>();
        //逻辑仓位（人工、策略）
        public readonly ObservableCollection<LogicPosition> LogicPositionView = new ObservableCollection<LogicPosition>();
        #endregion
        public static readonly ConcurrentQueue<string> MemLog = new ConcurrentQueue<string>();
        /// <summary>
        /// 品种字典（ID-Name键值）
        /// </summary>
        public static readonly Dictionary<string, string> dicProductIDName = new Dictionary<string, string>();
        //public static readonly Dictionary<string, string> dicInstrumentIDName = new Dictionary<string, string>();
        public static readonly Dictionary<string, InstrumentData> dicInstrumentData = new Dictionary<string, InstrumentData>();
        public static readonly TQConcurrentDictionary<string, Combo> dicAllCustomProductList = new TQConcurrentDictionary<string, Combo>();
        public static readonly TQConcurrentDictionary<string, Combo> dicCustomProduct = new TQConcurrentDictionary<string, Combo>();
        /// <summary>
        /// 所有委托单字典（Key:BrokerID+BrokerOrderSeq）
        /// </summary>
        public static readonly TQConcurrentDictionary<string, OrderData> dicOrder = new TQConcurrentDictionary<string, OrderData>();
        public static readonly TQConcurrentDictionary<string, ParkedOrderField> dicParkedOrder = new TQConcurrentDictionary<string, ParkedOrderField>();
        /// <summary>
        /// 持仓明细字典(Key:InvestorID+InstrumentID+成交编号)
        /// </summary>
        public static readonly TQConcurrentDictionary<string, PositionDetail> dicPositionDetails = new TQConcurrentDictionary<string, PositionDetail>();
        //public static readonly TQConcurrentDictionary<string, PositionData> dicPosition = new TQConcurrentDictionary<string, PositionData>();
        public static readonly TQConcurrentDictionary<string, PositionDataSummary> dicPositionSummary = new TQConcurrentDictionary<string, PositionDataSummary>();
        public static readonly TQConcurrentDictionary<string, TradeField> dicTradeField = new TQConcurrentDictionary<string, TradeField>();
        public static readonly TQConcurrentDictionary<string, TradeDataSummary> dicTradeDataSum = new TQConcurrentDictionary<string, TradeDataSummary>();
        public static readonly TQConcurrentDictionary<string, MarketData> dicMarketData = new TQConcurrentDictionary<string, MarketData>();
        public static readonly TQConcurrentDictionary<string, InstrumentGroup> dicInstrumentIDsGroup =  new TQConcurrentDictionary<string, InstrumentGroup>();
        public static readonly Dictionary<string, Window> DicWindow = new Dictionary<string, Window>();

        // 逻辑报单对应关系，包含策略或者组合，不包含普通报单
        public static List<LogicOrderMapping> LogicOrderMappingList = new List<LogicOrderMapping>();
        public static readonly TQConcurrentDictionary<string, LogicPosition> dicLogicPositions = new TQConcurrentDictionary<string, LogicPosition>();
        public int SessionId, FrontId;
        public static int RequestID = 0;
        public bool FirstTimeLoginTradingDay;
        internal System.Timers.Timer IntervalTimer;   //System.Timers.Timer uses new thread to run.
        public static StrategyWindow strategyWindow;
        public ControllerBackground controller;

        ContextMenu productContextMenu = new ContextMenu();

        public readonly Dictionary<DataGridType, DataGridMapping> dicMainDataGridMapping = new Dictionary<DataGridType, DataGridMapping>();

        public static ObservableCollection<Strategy> ocStrategy=new ObservableCollection<Strategy>();
        public static ObservableCollection<StrategyLib> ocStrategyLib=new ObservableCollection<StrategyLib>();

        TQMainVM ViewModel = new TQMainVM();
        private List<string> logicPosiInstrumnetIDs;//保存逻辑持仓合约代码的列表
        private LogicPositionRecords logicPosiRecords;

        public TQMain()
        {
            InitializeComponent();
            try
            {
                IntervalTimer = new System.Timers.Timer(500);
                startIntervalTimer();
                PreciseTimer.StartTimer();

                DataContext = ViewModel;

                #region setting up Bindings between OrderBoard and Controls
                //scrollbarNum.SetBinding(ScrollBar.ValueProperty, new Binding("Quant") { Source = orderboard, Mode = BindingMode.TwoWay });
                //scrollbarPrice.SetBinding(ScrollBar.ValueProperty, new Binding("OrderPrice") { Source = orderboard, Mode = BindingMode.TwoWay });
                //txtblkAskPrice1.SetBinding(TextBlock.TextProperty, new Binding("MarketData.AskPrice1") { Source = orderboard, Mode = BindingMode.OneWay });
                //txtblkBidPrice1.SetBinding(TextBlock.TextProperty, new Binding("MarketData.BidPrice1") { Source = orderboard, Mode = BindingMode.OneWay });
                //txtblkLowerLPrice.SetBinding(TextBlock.TextProperty, new Binding("MarketData.LowerLimitPrice") { Source = orderboard, Mode = BindingMode.OneWay });
                //txtblkUpperLPrice.SetBinding(TextBlock.TextProperty, new Binding("MarketData.UpperLimitPrice") { Source = orderboard, Mode = BindingMode.OneWay });

                //txtBlkTradeName.SetBinding(TextBlock.TextProperty, new Binding("TradeName") { Source = orderboard, Mode = BindingMode.OneWay });
                //txtBoxInstrumentID.SetBinding(TextBox.TextProperty, new Binding("MarketData.InstrumentID") { Source = orderboard, Mode = BindingMode.TwoWay });
                //txtblkAskVolume1.SetBinding(TextBlock.TextProperty, new Binding("MarketData.AskVolume1") { Source = orderboard, Mode = BindingMode.OneWay });
                //txtblkBidVolume1.SetBinding(TextBlock.TextProperty, new Binding("MarketData.BidVolume1") { Source = orderboard, Mode = BindingMode.OneWay });
                #endregion
                dicCustomProduct.OnDataUpdated += CustomProductUpdated;
                dicMarketData.OnDataUpdated += MarketDataUpdated;
                TQSpinWait SpinWaitMarketData = new TQSpinWait(() => !QTicks.IsEmpty);
                SpinWaitMarketData.Handler += SpinWaitHandler;
                SpinWaitMarketData.Start();
            }
            catch (Exception eee)
            {
                MessageBox.Show("Alert:  " + eee.ToString());
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                Hide();

                TradingAccountDataView.Add(new TradingAccountData());
                LoginWindow = new LoginWindow(this);
                if (LoginWindow.ShowDialog() != true)
                {
                    MemLog.Enqueue(DateTime.Now.ToString("HH:mm:ss.ffff") + " unable to Login(Trade, Quote)");
                    LoginWindow.Close();
                    if (T != null) T.ReqUserLogout();
                    if (Q != null) Q.ReqUserLogout();
                    Thread.Sleep(1000);
                    Close();
                    return;
                }

                InitializeMainDataGridMapping();
                //InitInstrumentDataList();
                //InitTraderByConfig();
                #region 从Configuration.xml中加载各种DataGrid列
                Utility.LoadConfiguration(AccountDataGrid, DataGridType.Account);
                Utility.LoadConfiguration(MarketDataGrid, DataGridType.MarketData);
                Utility.LoadConfiguration(InstrumentDataGrid, DataGridType.Instrument);
                Utility.LoadConfiguration(UnsettledOrdersGrid, DataGridType.UnsettledOrders);
                Utility.LoadConfiguration(TodayOrdersGrid, DataGridType.TodayOrders);
                Utility.LoadConfiguration(ComplexOrderGrid, DataGridType.ComplexOrders);
                Utility.LoadConfiguration(SettledOrdersGrid, DataGridType.SettledOrders);
                Utility.LoadConfiguration(CanceledOrdersGrid, DataGridType.CanceledOrders);
                Utility.LoadConfiguration(PositionSummaryGrid, DataGridType.PositionSummary);
                Utility.LoadConfiguration(PositionDetailsGrid, DataGridType.PositionDetails);
                Utility.LoadConfiguration(ManualPositionGrid, DataGridType.ManualPosition);
                Utility.LoadConfiguration(StrategyPositionGrid, DataGridType.StrategyPosition);
                //Utility.LoadConfiguration(ComboPositionGrid, DataGridType.ComboPosition);
                Utility.LoadConfiguration(TradeRecordDetailsGrid, DataGridType.TradeDetails);
                Utility.LoadConfiguration(TradeRecordSummaryGrid, DataGridType.TradeSummary);
                #endregion
                AccountDataGrid.ItemsSource = TradingAccountDataView;
                MarketDataGrid.ItemsSource = MarketDataView;
                MarketDataListBox.ItemsSource = MarketDataView;
                InstrumentDataGrid.ItemsSource = dicInstrumentData.Values;
                TodayOrdersGrid.ItemsSource = OrderDataView;
                UnsettledOrdersGrid.ItemsSource = OrderDataView;
                SettledOrdersGrid.ItemsSource = OrderDataView;
                CanceledOrdersGrid.ItemsSource = OrderDataView;
                ComplexOrderGrid.ItemsSource = ParkedOrderView;
                PositionDetailsGrid.ItemsSource = PositionDetailView;
                PositionSummaryGrid.ItemsSource = PositionDataSummaryView;
                ManualPositionGrid.ItemsSource = LogicPositionView;
                StrategyPositionGrid.ItemsSource = LogicPositionView;

                ManualPositionGrid.ItemsSource = LogicPositionView;
                StrategyPositionGrid.ItemsSource = LogicPositionView;
                TradeRecordSummaryGrid.ItemsSource = TradeDataSummaryView;
                TradeRecordDetailsGrid.ItemsSource = TradeDataView;

                MemLog.Enqueue(string.Format("Now {0} PreciseTime {1} Main Start! ", DateTime.Now.TimeOfDay, PreciseTimer.GetPreciseTime(0).TimeOfDay));

                if (Trader.LoginMode == LoginMode.DebugOffline)
                {
                    //btnSaveOffline.Visibility = Visibility.Collapsed;
                    LoadOffLineData();
                }
                else if (Trader.LoginMode == LoginMode.PreDebugOffline)
                {
                    btnSaveOffline.Visibility = Visibility.Visible;
                }
                //controller = new ControllerBackground(this);
                #region UI
                //these datagrid views share the same data source, but have different display info; will make a single class file to hold
                PositionSummaryGrid.Visibility = Visibility.Visible;
                //RdBtnPst.IsChecked = true;
                #endregion
                // 加载历史LogicPosition 和其包含的合约代码
                logicPosiRecords = new LogicPositionRecords(Trader.LogicPosiFile);
                Combo combo;
                foreach (var item in logicPosiRecords.Positions)
                {
                    logicPosiInstrumnetIDs = new List<string>();

                    if (dicCustomProduct.TryGetValue(item.InstrumentID, out combo))
                    {
                        combo.ItemList.ForEach(inst =>
                        {
                            if (!logicPosiInstrumnetIDs.Contains(inst.InstrumentID))
                            {
                                logicPosiInstrumnetIDs.Add(inst.InstrumentID);
                            }
                        });
                    }
                    else
                    {
                        if (!logicPosiInstrumnetIDs.Contains(item.InstrumentID))
                        {
                            logicPosiInstrumnetIDs.Add(item.InstrumentID);
                        }
                    }
                }
                if (string.IsNullOrEmpty(logicPosiRecords.TradingDay) || logicPosiRecords.Positions.Count == 0)
                {
                    Trader.CustProductOrderNo = 1;
                }

                if (Trader.LoginMode != LoginMode.DebugOffline)
                {
                    T.OnRtnCancel += trade_OnRtnCancel;
                    T.OnRtnError += trade_OnRtnError;
                    //T.OnRtnExchangeStatus += trade_OnRtnExchangeStatus;
                    T.OnRtnNotice += trade_OnRtnNotice;
                    T.OnRtnTrade += trade_OnRtnTrade;
                    //T.OnRtnOrder += trade_OnRtnOrder;
                    T.OnRspQryInvestorPosition += trade_OnRspQryInvestorPosition;
                    T.OnRspQrySettlementInfo += trade_OnRspQrySettlementInfo;
                    T.OnRspUserLogin += LoginWindow.trade_OnRspUserLogin;
                    if (Q != null && Q.IsLogin)
                    {
                        if (!Trader.LoadExtConfig())
                        {
                            Utility.WriteMemLog(MemLog, "null is loaded for Extensions.xml");
                            //return;
                        }
                        if (Trader.CurrInstrumentList.Count > 0)
                        {
                            //Q.OnRtnTick += Quote_OnRtnTick;
                            //先订阅自选合约的行情，再查询持仓结束后，订阅持仓中合约未订阅行情的合约
                            //Task t = Task.Run(new Action(() =>
                            //{
                            Q.ReqSubscribeMarketData(Q.SubscribedInstrumentIDs);
                            //在登录查询完成交信息后，调用trade中的InitQryInstructions查询自选合约中的交易费和保证金
                            //QryInstrumentCommissionRate(Q.SubscribedInstrumentIDs);
                            //QryInstrumentMarginRate(Q.SubscribedInstrumentIDs);
                            Show();
                        }
                    }
                }
                CustomCommands.InitCmd();
            }
            catch (Exception ee)
            {
                Utility.WriteLogFile(DateTime.Now.ToString("HH:mm:ss.ffff") + " Exception Occured: " + ee.Message);
                SaveConfiguration();
                if (T != null && T.IsLogin)
                {
                    T.ReqUserLogout();
                }
                if (Q != null && Q.IsLogin)
                {
                    Q.ReqUnSubscribeMarketData(Q.SubscribedInstrumentIDs);
                    Q.ReqUserLogout();
                }

                Thread.Sleep(1000);
                if (LoginWindow != null) LoginWindow.Close();

                this.Close();
            }
        }

        private void InitializeMainDataGridMapping()
        {
            dicMainDataGridMapping.Add(DataGridType.Account, new DataGridMapping()
            {
                DataGridType = DataGridType.Account,
                TQMainDataGrid = AccountDataGrid,
                ColumnSettingList = Trader.Configuration.AccountDataGrid
            });
            dicMainDataGridMapping.Add(DataGridType.MarketData, new DataGridMapping()
            {
                DataGridType = DataGridType.MarketData,
                TQMainDataGrid = MarketDataGrid,
                ColumnSettingList = Trader.Configuration.MarketDataGrid
            });
            dicMainDataGridMapping.Add(DataGridType.Instrument, new DataGridMapping()
            {
                DataGridType = DataGridType.Instrument,
                TQMainDataGrid = InstrumentDataGrid,
                ColumnSettingList = Trader.Configuration.InstrumentDataGrid
            });
            dicMainDataGridMapping.Add(DataGridType.UnsettledOrders, new DataGridMapping()
            {
                DataGridType = DataGridType.UnsettledOrders,
                TQMainDataGrid = UnsettledOrdersGrid,
                ColumnSettingList = Trader.Configuration.UnsettledOrdersGrid
            });
            dicMainDataGridMapping.Add(DataGridType.TodayOrders, new DataGridMapping()
            {
                DataGridType = DataGridType.TodayOrders,
                TQMainDataGrid = TodayOrdersGrid,
                ColumnSettingList = Trader.Configuration.TodayOrderGrid
            });
            dicMainDataGridMapping.Add(DataGridType.ComplexOrders, new DataGridMapping()
            {
                DataGridType = DataGridType.ComplexOrders,
                TQMainDataGrid = ComplexOrderGrid,
                ColumnSettingList = Trader.Configuration.ComplexOrderGrid
            });
            dicMainDataGridMapping.Add(DataGridType.SettledOrders, new DataGridMapping()
            {
                DataGridType = DataGridType.SettledOrders,
                TQMainDataGrid = SettledOrdersGrid,
                ColumnSettingList = Trader.Configuration.SettledOrdersGrid
            });
            dicMainDataGridMapping.Add(DataGridType.CanceledOrders, new DataGridMapping()
            {
                DataGridType = DataGridType.CanceledOrders,
                TQMainDataGrid = CanceledOrdersGrid,
                ColumnSettingList = Trader.Configuration.CanceledOrdersGrid
            });

            dicMainDataGridMapping.Add(DataGridType.PositionSummary, new DataGridMapping()
            {
                DataGridType = DataGridType.PositionSummary,
                TQMainDataGrid = PositionSummaryGrid,
                ColumnSettingList = Trader.Configuration.PositionSummaryGrid
            });
            dicMainDataGridMapping.Add(DataGridType.PositionDetails, new DataGridMapping()
            {
                DataGridType = DataGridType.PositionDetails,
                TQMainDataGrid = PositionDetailsGrid,
                ColumnSettingList = Trader.Configuration.PositionDetailsGrid
            });
            dicMainDataGridMapping.Add(DataGridType.ManualPosition, new DataGridMapping()
            {
                DataGridType = DataGridType.ManualPosition,
                TQMainDataGrid = ManualPositionGrid,
                ColumnSettingList = Trader.Configuration.ManualPositionGrid
            });
            dicMainDataGridMapping.Add(DataGridType.StrategyPosition, new DataGridMapping()
            {
                DataGridType = DataGridType.StrategyPosition,
                TQMainDataGrid = StrategyPositionGrid,
                ColumnSettingList = Trader.Configuration.StrategyPositionGrid
            });
            dicMainDataGridMapping.Add(DataGridType.TradeDetails, new DataGridMapping()
            {
                DataGridType = DataGridType.TradeDetails,
                TQMainDataGrid = TradeRecordDetailsGrid,
                ColumnSettingList = Trader.Configuration.TradeDetailsGrid
            });
            dicMainDataGridMapping.Add(DataGridType.TradeSummary, new DataGridMapping()
            {
                DataGridType = DataGridType.TradeSummary,
                TQMainDataGrid = TradeRecordSummaryGrid,
                ColumnSettingList = Trader.Configuration.TradeSummaryGrid
            });
        }

        public void MarketDataViewUpdate(MarketData MD)
        {
        //    int i = Trader.CurrInstrumentIDGroupIDLIst.IndexOf(MD.InstrumentID);
        //    MarketData market;
        //    Dispatcher.BeginInvoke(new Action(() =>
        //   {
        //       if (MarketDataView.Count < 1 || i < 0)
        //           return;

        //       //if (dicMarketData.TryGetValue(MD.InstrumentID, out market))
        //       //market
        //       //MarketDataView[i] = MD;

        //       // 不用 orderBoard 了
        //       //if (orderboard.InstrumentID == MD.InstrumentID)
        //       //    MarketDataGrid.SelectedIndex = i;

        //   }));
        }
        public void MarketDataUpdated(MarketData DepthDataUpdated)
        {
            //更新自定义品种行情
            //IEnumerable<string> CustContains = dicCustomProduct.Keys.Where(x => x.Contains(DepthDataUpdated.InstrumentID));
            //if (dicCustomProduct.Count > 0 && CustContains.Count() > 0)
            //{
            //    CustomProduct _customproduct;

            //    int ii;
            //    foreach (var v in CustContains)
            //    {
            //        if ((ii = Trader.CurrInstrumentIDGroupIDLIst.FindIndex(x => x == v)) < 0) continue;
            //        else
            //        {
            //            dicCustomProduct[v].AskPrice1 = 0;
            //            dicCustomProduct[v].AskVolume1 = 0;
            //            dicCustomProduct[v].BidPrice1 = 0;
            //            dicCustomProduct[v].BidVolume1 = 0;
            //            dicCustomProduct[v].OpenPrice = 0;
            //            dicCustomProduct[v].PreClosePrice = 0;
            //            dicCustomProduct[v].PreSettlementPrice = 0;
            //            dicCustomProduct[v].LastPrice = 0;
            //            dicCustomProduct[v].updateTime = DepthDataUpdated.updateTime;
            //            dicCustomProduct[v].UpdateMillisec = DepthDataUpdated.updateMillisec;
            //            dicCustomProduct[v].ItemIndex = ii;
            //        }
            //    }
            //}
            //条件单触发机制   controller.eventTrigger(DataUpdated);
        }
        private void CustomProductUpdated(Combo DataUpdated)
        {
            QTicks.Enqueue(DataUpdated);
        }

        private void SpinWaitHandler()
        {
            MarketData marketdata;
            QTicks.TryDequeue(out marketdata);
            if (marketdata == null)
                return;

            //处理浮动盈亏等
            bool isNeedFresh = false;
            if (dicPositionDetails.Values.Where(x => x.InstrumentID == marketdata.instrumentID).Count() > 0)
            {
                var posList = dicPositionDetails.Values.ToList();
                for (int itemIndex = 0; itemIndex < posList.Count; itemIndex++)
                {
                    if (posList[itemIndex].OpenDate != Trader.Configuration.TradingDay)//昨仓处理
                    {

                        posList[itemIndex].PositionProfitByDate = (posList[itemIndex].Direction == PosiDirection.多 ? 1 : -1)
                            * (marketdata.LastPrice - marketdata.preSettlementPrice) * posList[itemIndex].Volume * marketdata.VolumeMultiple;
                        posList[itemIndex].PositionProfitByTrade = (posList[itemIndex].Direction == PosiDirection.多 ? 1 : -1)
                            * (marketdata.LastPrice - posList[itemIndex].OpenPrice) * posList[itemIndex].Volume * marketdata.VolumeMultiple;
                    }
                    else
                    {
                        posList[itemIndex].PositionProfitByDate = (posList[itemIndex].Direction == PosiDirection.多 ? 1 : -1)
                            * (marketdata.LastPrice - posList[itemIndex].OpenPrice) * posList[itemIndex].Volume * marketdata.VolumeMultiple;
                        posList[itemIndex].PositionProfitByTrade = (posList[itemIndex].Direction == PosiDirection.多 ? 1 : -1)
                            * (marketdata.LastPrice - posList[itemIndex].OpenPrice) * posList[itemIndex].Volume * marketdata.VolumeMultiple;
                    }
                }
                if (isNeedFresh)
                {
                    double floatProfit = 0;
                    //持仓汇总的浮动盈亏更新
                    var posSumList = Q.main.PositionDataSummaryView.ToList();
                    for (int itemIndex = 0; itemIndex < posSumList.Count; itemIndex++)
                    {

                        if (posSumList[itemIndex].InstrumentID == marketdata.InstrumentID)
                        {
                            posSumList[itemIndex].PositionProfit = posList.Where(x => x.InstrumentID == posSumList[itemIndex].InstrumentID && x.Direction == posSumList[itemIndex].Direction).Sum(x => x.PositionProfitByDate);
                            //posSumList[itemIndex].PositionProfitByTrade = posList.Where(x => x.InstrumentID == posSumList[itemIndex].InstrumentID && x.Direction == posSumList[itemIndex].Direction).Sum(x => x.PositionProfitByTrade);
                        }
                        floatProfit += posSumList[itemIndex].PositionProfit;
                    }
                    //资金账户的浮动盈亏更新
                    Dispatcher.Invoke(new Action(() =>
                    {
                        TradingAccountDataView[0].PositionProfit = floatProfit;
                    }));
                }
            }
            //组合持仓
            //List<LogicPosition> LogicPositionList =


            foreach (var item in dicLogicPositions.Values.Where(p => p.Position > 0 && p.InstrumentID.Contains(marketdata.instrumentID)))
            {
                if (item.IsCombo)
                {
                    Combo comboMd;
                    dicCustomProduct.TryGetValue(item.InstrumentID, out comboMd);

                    if (comboMd != null)
                    {
                        if (comboMd.ItemList.Any(md => md.InstrumentID == marketdata.instrumentID))
                        {
                            if (item.Direction == PosiDirection.多)
                                item.PositionProfit = item.Position * comboMd.LastPrice - item.OpenCost;
                            else
                                item.PositionProfit = item.OpenCost - item.Position * comboMd.LastPrice;
                        }
                    }
                }
                else if (item.InstrumentID == marketdata.instrumentID)
                {
                    if (item.Direction == PosiDirection.多)
                        item.PositionProfit = item.Position * marketdata.LastPrice * marketdata.VolumeMultiple - item.OpenCost;
                    else
                        item.PositionProfit = item.OpenCost - item.Position * marketdata.LastPrice * marketdata.VolumeMultiple;
                }
            }

            //处理策略单
            var strategies = ocStrategy.Where(x => x.Contains(marketdata.instrumentID));
            if (strategies!=null && strategies.Count() > 0)
            {
                foreach (var str in strategies)
                {
                    str.eventTrigger(marketdata);
                }
            }
            //Tick2ViewUpdate(pMarketData);
            //判断是否需要进行逻辑持仓日结
            if (logicPosiInstrumnetIDs != null)
            {
                if (logicPosiInstrumnetIDs.Contains(marketdata.instrumentID))
                {
                    logicPosiInstrumnetIDs.Remove(marketdata.instrumentID);
                    //当获取逻辑持仓中包含的合约代码的行情时，进行逻辑持仓的日结
                    if (logicPosiInstrumnetIDs.Count == 0)
                    {
                        PositionProcess();
                        logicPosiInstrumnetIDs = null;
                    }
                }
            }

        }

        //private void Tick2ViewUpdate(MarketData pDepthMarketData)
        //{
        //    MarketData market;
        //    if (!dicMarketData.TryGetValue(pDepthMarketData.InstrumentID, out market)) return;
        //    MarketData marketdata = new MarketData(pDepthMarketData.InstrumentID)
        //    {
        //        ActionDay = pDepthMarketData.ActionDay,
        //        AskPrice1 = pDepthMarketData.AskPrice1,
        //        AskVolume1 = pDepthMarketData.AskVolume1,
        //        BidPrice1 = pDepthMarketData.BidPrice1,
        //        BidVolume1 = pDepthMarketData.BidVolume1,
        //        AskPrice2 = pDepthMarketData.AskPrice2,
        //        AskVolume2 = pDepthMarketData.AskVolume2,
        //        BidPrice2 = pDepthMarketData.BidPrice2,
        //        BidVolume2 = pDepthMarketData.BidVolume2,
        //        AskPrice3 = pDepthMarketData.AskPrice3,
        //        AskVolume3 = pDepthMarketData.AskVolume3,
        //        BidPrice3 = pDepthMarketData.BidPrice3,
        //        BidVolume3 = pDepthMarketData.BidVolume3,
        //        AskPrice4 = pDepthMarketData.AskPrice4,
        //        AskVolume4 = pDepthMarketData.AskVolume4,
        //        BidPrice4 = pDepthMarketData.BidPrice4,
        //        BidVolume4 = pDepthMarketData.BidVolume4,
        //        AskPrice5 = pDepthMarketData.AskPrice5,
        //        AskVolume5 = pDepthMarketData.AskVolume5,
        //        BidPrice5 = pDepthMarketData.BidPrice5,
        //        BidVolume5 = pDepthMarketData.BidVolume5,
        //        AveragePrice = pDepthMarketData.AveragePrice,
        //        ClosePrice = pDepthMarketData.ClosePrice,
        //        HighestPrice = pDepthMarketData.HighestPrice,
        //        LastPrice = pDepthMarketData.LastPrice,
        //        LowerLimitPrice = pDepthMarketData.LowerLimitPrice,
        //        LowestPrice = pDepthMarketData.LowestPrice,
        //        OpenInterest = pDepthMarketData.OpenInterest,
        //        OpenPrice = pDepthMarketData.OpenPrice,
        //        PreClosePrice = pDepthMarketData.PreClosePrice,
        //        PreOpenInterest = pDepthMarketData.PreOpenInterest,
        //        PreSettlementPrice = pDepthMarketData.PreSettlementPrice,
        //        SettlementPrice = pDepthMarketData.SettlementPrice,
        //        TradingDay = pDepthMarketData.TradingDay,
        //        Turnover = pDepthMarketData.Turnover,
        //        UpdateMillisec = pDepthMarketData.UpdateMillisec,
        //        UpdateTime = pDepthMarketData.updateTime,
        //        UpperLimitPrice = pDepthMarketData.UpperLimitPrice,
        //        Volume = pDepthMarketData.Volume,
        //        ExchangeID = pDepthMarketData.ExchangeID,
        //        ExchangeInstID = pDepthMarketData.ExchangeInstID
        //    };
        //    marketdata.Change = 0;
        //    if (!(marketdata.IsCustom = pDepthMarketData.InstrumentID.IndexOfAny(new char[] { '-', '+' }) >= 0 ? true : false))
        //    {
        //        marketdata.ChangePercent = "";
        //    }
        //    marketdata.CurrentVolume = marketdata.Volume - dicMarketData[pDepthMarketData.InstrumentID].Volume;
        //    //MarketDataViewUpdate(marketdata);
        //}

        /// <summary>
        /// dicCustomProduct存放所有已定义的自定义品种
        /// </summary>
        private void InitCustomProductList()
        {
            if (File.Exists(Trader.ExtCfgFile))
            {
                Trader.LoadExtConfig();
                if (Trader.ExtConfig != null)
                {
                    Trader.ExtConfig.Combos.ForEach(item =>
                    {
                        Combo cust = new Combo(item.InstrumentID, item.InstrumentName)
                        {
                            PriceTick = item.PriceTick
                        };
                        dicAllCustomProductList.TryAdd(item.InstrumentID, cust);
                    });
                }
            }
        }
        
        private void Window_Closed(object sender, EventArgs e)
        {
            SaveConfiguration();
            if (Q != null && Q.IsLogin)
            {
                Q.ReqUnSubscribeMarketData(Q.SubscribedInstrumentIDs);
                Q.ReqUserLogout();
            }
            if (T != null && T.IsLogin)
            {
                T.ReqUserLogout();
            }
            Utility.WriteMemLogToLogFile(MemLog);
            PreciseTimer.StopTimer();
            Thread.Sleep(500);
        }

        #region 持仓 处理

        private void RdBtnPst_Checked(object sender, RoutedEventArgs e)
        {
            btnOppositePriceClose.Visibility = Visibility.Visible;
            btnMarketPriceClose.Visibility = Visibility.Visible;
            btnMarketPriceReverse.Visibility = Visibility.Visible;

            this.PositionSummaryGrid.Visibility = Visibility.Visible;
            this.PositionDetailsGrid.Visibility = Visibility.Visible;
            //this.ComboPositionGrid.Visibility = Visibility.Collapsed;

        }

        private void RdBtnPstDtl_Checked(object sender, RoutedEventArgs e)
        {
            btnOppositePriceClose.Visibility = Visibility.Hidden;
            btnMarketPriceClose.Visibility = Visibility.Hidden;
            btnMarketPriceReverse.Visibility = Visibility.Hidden;

            this.PositionDetailsGrid.Visibility = Visibility.Visible;
            this.PositionSummaryGrid.Visibility = Visibility.Collapsed;
            //this.ComboPositionGrid.Visibility = Visibility.Collapsed;
        }

        private void RdBtnCbPst_Checked(object sender, RoutedEventArgs e)
        {
            btnOppositePriceClose.Visibility = Visibility.Hidden;
            btnMarketPriceClose.Visibility = Visibility.Hidden;
            btnMarketPriceReverse.Visibility = Visibility.Hidden;

            //this.ComboPositionGrid.Visibility = Visibility.Visible;
            this.PositionDetailsGrid.Visibility = Visibility.Collapsed;
            this.PositionSummaryGrid.Visibility = Visibility.Collapsed;
        }

        private void RdBtnDtl_Checked(object sender, RoutedEventArgs e)
        {
            this.TradeRecordDetailsGrid.Visibility = Visibility.Visible;
            this.TradeRecordSummaryGrid.Visibility = Visibility.Collapsed;
            this.TradeRecordSummaryGrid.Visibility = Visibility.Collapsed;
        }

        private void RdBtnSum_Checked(object sender, RoutedEventArgs e)
        {
            this.TradeRecordSummaryGrid.Visibility = Visibility.Visible;
            this.TradeRecordDetailsGrid.Visibility = Visibility.Collapsed;
            this.TradeRecordDetailsGrid.Visibility = Visibility.Collapsed;
        }
        //对价平仓
        private void btnOppositePriceClose_Click(object sender, RoutedEventArgs e)
        {
            if (PositionSummaryGrid.SelectedIndex < 0)
            {
                return;
            }
            PositionDataSummary posSum = PositionSummaryGrid.SelectedItem as PositionDataSummary;
            ClosePositionWithOppositePrice(posSum);
        }
        //市价平仓
        private void btnMarketPriceClose_Click(object sender, RoutedEventArgs e)
        {
            if (PositionSummaryGrid.SelectedIndex < 0)
            {
                return;
            }
            PositionDataSummary posSum = PositionSummaryGrid.SelectedItem as PositionDataSummary;
            ClosePositionWithMarketPrice(posSum);
        }
        //市价反手
        private void btnMarketPriceReverse_Click(object sender, RoutedEventArgs e)
        {
            //先平当前仓位，在接收到成交回报后，再开反向仓位(在当前仓位未平之前，占用保证金保持不变) todo:huangrongyu
            if (PositionSummaryGrid.SelectedIndex < 0)
            {
                return;
            }
            PositionDataSummary posSum = PositionSummaryGrid.SelectedItem as PositionDataSummary;
            T.ReqReversePosition(posSum);
            //ReversePositionMarketPrice(posSum);
        }
        //移仓
        private void miTransferPosition_Click(object sender, RoutedEventArgs e)
        {
            if (PositionSummaryGrid.SelectedIndex < 0)
            {
                PositionSummaryGrid.SelectedIndex = 0;
            }
            PositionDataSummary posSum = PositionSummaryGrid.SelectedItem as PositionDataSummary;

            //1.弹出窗口选择移仓的目标合约
            ExchangePositionWindow tranPosWin = new ExchangePositionWindow(posSum.InstrumentID);
            tranPosWin.ShowDialog();
            if (string.IsNullOrEmpty(tranPosWin.DesInstrument))
            {
                return;
            }
            string desInstrument = tranPosWin.DesInstrument;
            //2.检查目标合约是否已经订阅
            MarketData md;

            bool isSHFE = (posSum.ExchangeName == Utility.GetExchangeName(posSum.InstrumentID)) ? true : false;

            if (!dicMarketData.TryGetValue(desInstrument, out md))
            {
                if (isSHFE)
                {
                    MessageBox.Show("该合约的移仓目标合约没有订阅行情，请订阅行情后再进行移仓");
                    return;
                }
            }

            //3.先市价平当前仓
            ClosePositionWithMarketPrice(posSum);

            //4.再市价开移仓的目标合约
            TradeDirection dir = (posSum.Direction == PosiDirection.空) ? TradeDirection.空 : TradeDirection.多;
            var orderboard = md;
            orderboard.OrderBoardPricingMode = PricingMode.Market;
            orderboard.OrderBoardOrderMode = OrderMode.Open;
            orderboard.OrderBoardHedgeType = HedgeType.投机;//need to do
            orderboard.exchangeID = Utility.GetExchangeID(posSum.ExchangeName);
            T.ReqOrderInsert(orderboard, dir, posSum.Position);

            #region old method
            //DirectionType direction;
            //double price;
            //if (posSum.Direction == DirectionType.空)
            //{
            //    direction = DirectionType.多;
            //    price = isSHFE ? md.UpperLimitPrice : 0;
            //}
            //else
            //{
            //    direction = DirectionType.空;
            //    price = isSHFE ? md.LowerLimitPrice : 0;
            //}
            ////如有挂单，先撤单,再行移仓
            //var unsettledOrders = OrderDataView.Where(x => x.InstrumentID == posSum.InstrumentID &&
            //    x.Direction == direction && (x.Offset == OffsetType.平仓 || x.Offset == OffsetType.平今 || x.Offset == OffsetType.平昨)).ToList();
            //if (unsettledOrders != null && unsettledOrders.Count > 0)
            //{
            //    Task.Run(() =>
            //    {
            //        //先撤单
            //        int num = 0;
            //        foreach (var order in unsettledOrders)
            //        {
            //            num++;
            //            T.ReqOrderAction(order.FrontID, order.SessionID, order.OrderRef, order.InstrumentID);
            //        }
            //        string key = posSum.InstrumentID + direction.ToString();
            //        T.dicUnsettledCloseOrderNum.AddOrUpdate(key, num, (k, v) => num);
            //        while (true)
            //        {
            //            num = -1;
            //            if (!T.dicUnsettledCloseOrderNum.TryGetValue(key, out num))
            //            {
            //                //撤单成功后，再进行平仓操作
            //                if (isSHFE)
            //                {
            //                    if (posSum.YdPosition > 0)
            //                    {
            //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.YdPosition, LimitMarketFakFok.Limit);
            //                    }
            //                    if (posSum.TodayPosition > 0)
            //                    {
            //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
            //                    }
            //                }
            //                else
            //                {
            //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.Position, LimitMarketFakFok.Limit);
            //                }
            //                break;
            //            }
            //            Thread.Sleep(1000);
            //        }
            //        while (true)
            //        {
            //            //平仓成功后，最后进行移仓操作 //todo:huangrongyu
            //            if (true)
            //            {
            //                direction = posSum.Direction;
            //                if (isSHFE)
            //                {
            //                    T.ReqOrderInsert(desInstrument, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, price, posSum.Position, LimitMarketFakFok.Market);
            //                }
            //                else
            //                {
            //                    T.ReqOrderInsert(desInstrument, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机 );
            //                }
            //            }
            //            Thread.Sleep(1000);
            //        }
            //    });
            //}
            //else
            //{
            //    Task.Run(() =>
            //    {
            //        if (isSHFE)
            //        {
            //            if (posSum.YdPosition > 0)
            //            {
            //                T.ReqOrderInsert(posSum.InstrumentID, direction==DirectionType.多?TradeDirection.多:TradeDirection.空, OffsetType.平仓, price, posSum.YdPosition,LimitMarketFakFok.Limit);
            //            }
            //            if (posSum.TodayPosition > 0)
            //            {
            //                T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
            //            }
            //        }
            //        else
            //        {
            //            T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机);
            //        }
            //        while (true)
            //        {
            //            //平仓成功后，最后进行移仓操作 //todo:huangrongyu
            //            if (true)
            //            {
            //                direction = posSum.Direction;
            //                if (isSHFE)
            //                {
            //                    T.ReqOrderInsert(desInstrument, direction==DirectionType.多?TradeDirection.多:TradeDirection.空, OffsetType.开仓, price, posSum.Position, LimitMarketFakFok.Limit);
            //                }
            //                else
            //                {
            //                    T.ReqOrderInsert(desInstrument, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机 );
            //                }
            //            }
            //            Thread.Sleep(1000);
            //        }
            //    });
            //}
            #endregion
        }

        //清仓
        private void miCloseAll_Click(object sender, RoutedEventArgs e)
        {
            if (PositionDataSummaryView.Count < 1)
            {
                return;
            }
            var posSumList = PositionDataSummaryView.ToList();

            ForceCloseAllPositions();
        }

        private void DataGrid_CurrentCellChanged(object sender, EventArgs e)
        {
            string sInstrumentID=null;

            switch (((DataGrid)sender).Name)
            {
                case "PositionSummaryGrid":

                    try {
                        sInstrumentID = (PositionSummaryGrid.CurrentCell.Item as PositionDataSummary).InstrumentID;
                    }
                    catch { }

                    break;
                case "PositionDetailsGrid":
                    try
                    {
                        sInstrumentID = (PositionDetailsGrid.CurrentCell.Item as PositionDetail).InstrumentID;
                    }
                    catch { }
                    break;
                //case "ComboPositionGrid":
                //    try
                //    {
                //        sInstrumentID = (ComboPositionGrid.CurrentCell.Item as PositionData).InstrumentID;
                //    }
                //    catch { }
                //    break;
            }

            if (!string.IsNullOrEmpty(sInstrumentID))
            {
                MarketData m;
                dicMarketData.TryGetValue(sInstrumentID, out m);
                if (m != null)
                {
                    ViewModel.CurrentMarketData = m;
                }
            }
        }
        #endregion

        #region Rsp and Request event Handlers
        //private void Quote_OnRtnTick(object sender, TickEventArgs e)
        //{
        //    try
        //    {

        //    }
        //    catch (Exception ex)
        //    {
        //        Utility.WriteMemLog(MemLog, "error MarketData info" + ex.ToString());
        //        Ring("错误");
        //    }
        //}O

        private void trade_OnRtnError(object sender, ErrorEventArgs e)
        {
            ShowMsg(string.Format("帐号({0}),错误:{1}--{2}", ((Trade)sender).Investor, e.ErrorID, e.ErrorMsg));
            if (e.ErrorMsg.IndexOf("未处理请求超过许可数", StringComparison.Ordinal) >= 0)
            {
                //重发
                Thread.Sleep(20);
                OrderData od = new OrderData();
                int j = 0;
                for (j = 0; j < OrderDataView.Count; j++)
                    if (OrderDataView[j].OrderLocalID == e.ErrorID.ToString())
                        od = OrderDataView[j];

                OffsetType oe;
                switch (od.Offset)
                {
                    case OffsetType.开仓:
                        oe = OffsetType.开仓;
                        break;
                    case OffsetType.平仓:
                        oe = OffsetType.平仓;
                        break;
                    case OffsetType.平今:
                        oe = OffsetType.平今;
                        break;
                    default:
                        oe = OffsetType.平仓;
                        break;
                }
                PosiDirection direction = od.Direction;
                ((Trade)sender).ReqOrderInsert(od.InstrumentID, od.Direction==PosiDirection.多?TradeDirection.多:TradeDirection.空, oe, od.LimitPrice, od.VolumeTotalOriginal, Math.Abs(od.LimitPrice) < 1E-6 ? PricingMode.Market : PricingMode.Preset, od.Hedge);
            }
            Ring("指令单错误");
            Utility.WriteMemLog(MemLog, e.ErrorMsg + " OnRtnError");
        }

        private void trade_OnRtnNotice(object sender, StringEventArgs e)
        {
            ShowMsg(string.Format("帐号({0}),提醒:{1}", ((Trade)sender).Investor, e.Value));
            Ring("信息到达");
            Utility.WriteMemLog(MemLog, e.Value.ToString() + " OnRtnNotice");
        }

        /*private void trade_OnRtnExchangeStatus(object sender, StatusEventArgs e)
        {
            //ShowMsg(string.Format("{0,-12}{1,-8}:{2}", ((Trade)sender).Investor, e.Exchange, e.Status));
            //Ring("开收盘提示");
            Utility.WriteMemLog(MemLog,"ExchangeStatusChanged "+ e.Exchange+e.Status.ToString());
        }*/
        private void trade_OnRspQryInvestorPosition(object sender, EventArgs e)
        {
        }

        void trade_OnRtnTrade(object sender, TradeArgs e)
        {//处理持仓汇总和持仓明细
            InstrumentData instrument;
            if (!dicInstrumentData.TryGetValue(e.Value.InstrumentID, out instrument) || instrument == null || string.IsNullOrEmpty(instrument.InstrumentID)) return;
            if (!Q.SubscribedInstrumentIDs.Contains(e.Value.InstrumentID))
            {
                Q.SubscribedInstrumentIDs.Add(e.Value.InstrumentID);
                Q.ReqSubscribeMarketData(new List<string> { e.Value.InstrumentID });

                dicMarketData.TryAdd(e.Value.InstrumentID, new MarketData(e.Value.InstrumentID));
                QryInstrumentCommissionRate(new List<string>() { e.Value.InstrumentID });
                QryInstrumentMarginRate(new List<string>() { e.Value.InstrumentID });
            }
            double tradeAmount = e.Value.Price * e.Value.Volume * instrument.VolumeMultiple;
            InstrumentCommissionRate commissionRate;
            if (T.dicCommissionRate.TryGetValue(instrument.ProductID, out commissionRate))
                e.Value.Commission = Utility.GetCommission(tradeAmount, e.Value.Offset, commissionRate);
            else e.Value.Commission = 0;
            // 根据接收成交信息, 维护持仓明细, 以下为两组键值
            //posKey = value.investorID + value.instrumentID + value.direction + '1';
            //posKey1 = value.investorID + value.instrumentID + value.direction + '2';
            if (!PositionDetailUpdate(e.Value, instrument)) return;
            //根据成交信息, 维护持仓汇总信息   键值 InvestorID+InstrumentID+PosiDirection
            PositionSummaryUpdate(e.Value, instrument);
            ////更新dicMarketData中的持仓数据
            //int i;
            //switch (e.Value.Offset)
            //{
            //    case OffsetType.开仓:
            //        if (e.Value.direction == '0')
            //        {
            //            int.TryParse(dicMarketData[instrument.InstrumentID].OrderBoardLongPositionQuant, out i);
            //            dicMarketData[instrument.InstrumentID].OrderBoardLongPositionQuant = (i + e.Value.volume).ToString();
            //        }
            //        else
            //        {
            //            int.TryParse(dicMarketData[instrument.InstrumentID].OrderBoardShortPositionQuant, out i);
            //            dicMarketData[instrument.InstrumentID].OrderBoardShortPositionQuant = (i + e.Value.volume).ToString();
            //        }
            //        break;
            //    default:
            //        if (e.Value.direction == '0')
            //        {
            //            int.TryParse(dicMarketData[instrument.InstrumentID].OrderBoardShortPositionQuant, out i);
            //            dicMarketData[instrument.InstrumentID].OrderBoardLongPositionQuant = (i - e.Value.volume).ToString();
            //        }
            //        else
            //        {
            //            int.TryParse(dicMarketData[instrument.InstrumentID].OrderBoardLongPositionQuant, out i);
            //            dicMarketData[instrument.InstrumentID].OrderBoardLongPositionQuant = (i - e.Value.volume).ToString();
            //        }
            //        break;
            //}

            LogicOrderAddAnyTrade(e.Value);

            #region 根据开仓的成交信息，维护资金账户，扣减手续费金额
            TradingAccountData tradeAccount = TradingAccountDataView[0]; // Utility.DeepCpyTradingAccount(TradingAccountDataView[0]);
            tradeAccount.Commission += e.Value.Commission;
            tradeAccount.Balance -= e.Value.Commission;
            tradeAccount.Available -= e.Value.Commission;
            Dispatcher.BeginInvoke(new Action(() => TradingAccountDataView[0] = tradeAccount));
            #endregion
            Utility.WriteMemLog(MemLog, "new trade " + e.Value.ToString());
            Ring("成交通知");
        }



        /// <summary>
        /// 处理逻辑持仓
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        //private void trade_OnRtnOrder(object sender, OrderArgs e)
        //{
        //    OrderData order = e.Value;

        //    string OrderRefPrefix = order.OrderRef.Substring(0, 4);
        //    if (OrderRefPrefix != "0000")
        //    {

        //        LogicOrderMapping mapping = LogicOrderMappingList.Find(m => m.OrderParams.OrderRefPrefix == OrderRefPrefix);

        //        if (mapping == null)
        //        {
        //            throw new Exception(string.Format("LogicOrderMappingList 中找不到该笔报单\r\n报单引用：{0}！", order.OrderRef));
        //        }

        //         处理组合持仓，可能是也可能不是策略
        //        if (mapping.OrderParams.IsCombo)
        //        {

        //            mapping.AddOrUppdateOrder(order);

        //             尝试合成仓位

        //            CustomProduct combo;

        //            dicCustomProduct.TryGetValue(mapping.OrderParams.Instrument, out combo);

        //            if (combo == null)
        //            {
        //                throw new Exception(string.Format("合约列表中找不到该自定义合约：{0}！", order.InstrumentID));
        //            }

        //            int position = int.MaxValue, positionNew = 0;
        //            foreach (var item in combo.ItemList)
        //            {
        //                var orderData = mapping.TradeList.Find(o => o.InstrumentID == item.InstrumentID);

        //                if (orderData == null)
        //                {
        //                    position = 0;
        //                    break;
        //                }
        //                else
        //                {
        //                    positionNew = Math.Abs(orderData.VolumeTraded / item.Weight);

        //                    if (position > positionNew) position = positionNew;
        //                }
        //            }

        //            if (position > 0)
        //            {
        //                 先平仓再开仓原则
        //                PosiDirection direction = mapping.OrderParams.TradeDirection == TradeDirection.多 ? PosiDirection.空 : PosiDirection.多;

        //                LogicPosition positionClose = LogicPositionView.First(p => p.InstrumentID == order.InstrumentID && p.Direction == direction);

        //                if (positionClose.Position > position)
        //                {

        //                }

        //            }
        //        }
        //        else
        //        {
        //             处理非组合但是策略的持仓
        //            if (mapping.OrderParams.Instrument != order.InstrumentID)
        //            {
        //                throw new Exception(string.Format("LogicOrderMappingList 中的合约编号与报单回报不同！\r\nLogicOrderMappingList 中的合约编号:{0}\r\n报单引用：{1}\r\n报单回报的合约编号：{2}！",
        //                    mapping.OrderParams.Instrument, order.OrderRef, order.InstrumentID));
        //            }
        //        }
        //    }

        //}


        /// <summary>
        /// 接受成交回报，存入 TradeList
        /// 计算 已成交数量 写入 VolumeTraded，同时将增加部分计入持仓
        /// 根据方向计算 OpenVolume 、CloseVolume
        /// 设置 position = ydposition + OpenVolume - CloseVolume
        /// </summary>
        /// <param name="trade"></param>
        public void LogicOrderAddAnyTrade(TradeField trade)
        {
            string OrderRefPrefix = trade.OrderRef.Substring(0, 4);

            int orderBoardPositionQuant = 0;
            int tradedVolumeAdded;
            double tradeCostAdded;//, tradeCommissionAdded;
            bool isCombo,isStrategy=false;
            LogicPosition position, position1, positionCompare;
            string instrumentID, posKey, posKey1, posKeyCompare = "";
            OrderMode orderMode;
            PosiDirection positionDirection;
            MarketData md;

            // 只接受 组合或者策略 的成交回报
            if (OrderRefPrefix != "    ")
            {
                LogicOrderMapping mapping = LogicOrderMappingList.Find(m => m.OrderParams.OrderRefPrefix == OrderRefPrefix);
                if (mapping == null)
                {
                    throw new Exception(string.Format("逻辑报单记录中找不到该笔报单\r\n报单引用：{0}！", trade.OrderRef));
                }
                mapping.AddTrade(trade, out tradedVolumeAdded, out tradeCostAdded);

                instrumentID = mapping.OrderParams.InstrumentID;
                orderMode = mapping.OrderParams.OrderMode;
                positionDirection = mapping.OrderParams.TradeDirection == TradeDirection.多 ? PosiDirection.多 : PosiDirection.空;
                isCombo = mapping.OrderParams.IsCombo;
                if (isCombo)
                {
                    Combo combo;
                    dicCustomProduct.TryGetValue(instrumentID, out combo);
                    md = combo;
                }
                else
                {
                    dicMarketData.TryGetValue(instrumentID, out md);
                    isCombo = false;
                    isStrategy = true;
                    //更新对应策略的信息，比如 策略状态,成交情况，持仓情况
                    //var strategies = ocStrategy.Where(x => x.listOrder.Where(y => y._iOrderRef.Contains( OrderRefPrefix)) !=null &&
                    //                                       x.listOrder.Where(y => y._iOrderRef.Contains(OrderRefPrefix)).Count() > 0);
                    var strategy = GetStrategy(instrumentID, OrderRefPrefix, StrategyStateType.开仓触发);
                    if (strategy != null )
                    {
                        if (strategy.InstanceState == StrategyStateType.开仓触发)
                        {
                            stTradeInfo stTrade = new stTradeInfo() { dPrice = trade.price, iVolume = trade.volume, iOrderRef = trade.orderRef };
                            strategy.ListOrder[0].rtnTrade(stTrade);
                            strategy.rtnTrade(stTrade);
                            strategy.InstanceState = StrategyStateType.已开仓;
                        }
                        if (strategy.InstanceState == StrategyStateType.平仓触发)
                        {
                            strategy.InstanceState = StrategyStateType.已平仓;
                        }
                    }
                }
            }
            else
            {
                instrumentID = trade.instrumentID;
                dicMarketData.TryGetValue(instrumentID, out md);
                tradedVolumeAdded = trade.volume;
                tradeCostAdded = trade.price * trade.volume * md.VolumeMultiple;
                orderMode = OrderMode.Auto;
                positionDirection = trade.Direction;
                isCombo = false;
            }

            if (tradedVolumeAdded > 0)
            {

                posKey = trade.investorID + instrumentID + positionDirection;
                posKey1 = trade.investorID + instrumentID + (positionDirection == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多);

                switch (orderMode)
                {
                    case OrderMode.Open:
                        if (dicLogicPositions.TryGetValue(posKey, out position))
                        {
                            // 昨仓和今仓 所有的未平仓位持仓均价，受平仓影响（按剩余数量计算，与平仓价格无关）
                            position.AvgPrice = (position.AvgPrice * position.Position + tradeCostAdded / md.VolumeMultiple) / (position.Position + tradedVolumeAdded);
                            position.OpenCost += tradeCostAdded;// 昨仓和今仓 所有的开仓金额，受平仓影响（影响数量，不影响价格）
                            position.OpenVolume += tradedVolumeAdded;//今仓开仓量，不受平仓影响
                            position.OpenAmount += tradeCostAdded;//今仓开仓金额，不受平仓影响
                            position.Position += tradedVolumeAdded;//昨仓和今仓 所有的未平仓位，受平仓影响

                            // 2016-6-28 侍总决定不需要持仓成本，只需要开仓成本
                            //position.PositionCost += tradeCostAdded;//昨仓和今仓 所有的未平仓位持仓成本，受平仓影响（影响数量，不影响价格）
                            position.TodayPosition += tradedVolumeAdded;//今仓未平仓位，受平仓影响

                            ////手续费，按比例从 trade 获取，
                            ////2016-6-27 侍总决定不需要显示手续费了。
                            //position.Commission += tradeCommissionAdded;

                            //保证金率，保证金 ？
                        }
                        else
                        {
                            position = new LogicPosition()
                            {
                                AvgPrice = tradeCostAdded / tradedVolumeAdded / md.VolumeMultiple,
                                InstrumentID = instrumentID,
                                BrokerID = trade.BrokerID,
                                Direction = positionDirection,
                                ExchangeName = isCombo ? "" : trade.ExchangeName,//组合有跨交易所的情况，不填交易所
                                OpenVolume = tradedVolumeAdded,
                                OpenCost = tradeCostAdded,
                                OpenAmount = tradeCostAdded,
                                //hedgeFlag = value.hedgeFlag,
                                Position = tradedVolumeAdded,
                                //PositionCost = tradeCostAdded,
                                TodayPosition = tradedVolumeAdded,
                                //TradingDay = value.TradingDay,
                                //SettlementID = value.SettlementID,
                                InvestorID = trade.investorID,
                                //PositionType = PositionDate,

                                ////手续费
                                ////2016-6-27 侍总决定不需要显示手续费了。
                                //Commission = tradeCommissionAdded
                                IsStrategy=isStrategy,
                                IsCombo = isCombo,
                            };
                            dicLogicPositions.TryAdd(posKey, position);
                            Dispatcher.BeginInvoke(new Action(() => LogicPositionView.Add(position)));
                        }

                        orderBoardPositionQuant = position.Position;
                        posKeyCompare = posKey1;

                        break;
                    default:  //自动，先平后开
                        {
                            int openVolume;

                            if (dicLogicPositions.TryGetValue(posKey1, out position1))
                            {
                                if (position1.Position >= tradedVolumeAdded)
                                {
                                    position1.OpenCost = position1.OpenCost * (position1.Position - tradedVolumeAdded) / position1.Position;
                                    position1.Position -= tradedVolumeAdded;
                                    //position1.PositionCost -= position1.AvgPrice * tradedVolumeAdded * md.VolumeMultiple;

                                    if (position1.Position == 0)
                                        position1.AvgPrice = 0;
                                    else
                                        position1.AvgPrice = position1.OpenCost / position1.Position / md.VolumeMultiple;

                                    position1.CloseAmount += tradeCostAdded;
                                    position1.CloseVolume += tradedVolumeAdded;

                                    orderBoardPositionQuant = position1.Position;
                                    posKeyCompare = posKey;
                                    positionDirection = positionDirection == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多;
                                    break;
                                }
                                // 2016-6-28 侍总说要显示持仓为 0 的记录
                                // 同时记录 开仓量
                                //else if (position1.Position == tradedVolumeAdded)
                                //{
                                //    Dispatcher.BeginInvoke(
                                //        new LogicPositionViewRemoveDelegate(LogicPositionViewRemove), position1
                                //        //new Action(() => LogicPositionView.Remove(position1))
                                //        );
                                //    dicLogicPositions.TryRemove(posKey1, out position1);

                                //    _OrderBoardPositionQuant = 0;
                                //    posKeyCompare = posKey;
                                //    positionDirection = positionDirection == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多;
                                //    break;
                                //}
                                else
                                {
                                    //Dispatcher.BeginInvoke(
                                    //   new LogicPositionViewRemoveDelegate(LogicPositionViewRemove), position1
                                    //   //new Action(() => LogicPositionView.Remove(position1))
                                    //   );
                                    //dicLogicPositions.TryRemove(posKey1, out position1);

                                    position1.CloseAmount += tradeCostAdded * position1.Position / tradedVolumeAdded;

                                    //position1.PositionCost = 0;
                                    position1.AvgPrice = 0;

                                    position1.CloseVolume += position1.Position;

                                    openVolume = tradedVolumeAdded - position1.Position;

                                    position1.Position = 0;

                                }
                            }
                            else
                            {
                                openVolume = tradedVolumeAdded;
                            }

                            orderBoardPositionQuant = openVolume;

                            //posKeyCompare = posKey1; // 没有反向仓，不需要比较了

                            double openCost = tradeCostAdded * openVolume / tradedVolumeAdded;


                            if (dicLogicPositions.TryGetValue(posKey, out position))
                            {
                                // 昨仓和今仓 所有的未平仓位持仓均价，受平仓影响（按剩余数量计算，与平仓价格无关）
                                position.AvgPrice = (position.AvgPrice * position.Position + openCost / md.VolumeMultiple) / (position.Position + openVolume);
                                position.OpenCost += openCost;// 昨仓和今仓 所有的开仓金额，受平仓影响（影响数量，不影响价格）
                                position.OpenVolume += openVolume;//今仓开仓量，不受平仓影响
                                position.OpenAmount += openCost;//今仓开仓金额，不受平仓影响
                                position.Position += openVolume;//昨仓和今仓 所有的未平仓位，受平仓影响

                                //position.PositionCost += openCost;//昨仓和今仓 所有的未平仓位持仓成本，受平仓影响（影响数量，不影响价格）
                                position.TodayPosition += openVolume;//今仓未平仓位，受平仓影响
                            }
                            else
                            {
                                position = new LogicPosition()
                                {
                                    AvgPrice = openCost / openVolume / md.VolumeMultiple,
                                    InstrumentID = instrumentID,
                                    BrokerID = trade.BrokerID,
                                    Direction = positionDirection,
                                    ExchangeName = isCombo ? "" : trade.ExchangeName,//组合有跨交易所的情况，不填交易所
                                    OpenVolume = openVolume,
                                    OpenCost = openCost,
                                    OpenAmount = openCost,
                                    //hedgeFlag = value.hedgeFlag,
                                    Position = openVolume,
                                    //PositionCost = openCost,
                                    TodayPosition = openVolume,
                                    //TradingDay = value.TradingDay,
                                    //SettlementID = value.SettlementID,
                                    InvestorID = trade.investorID,
                                    //PositionType = PositionDate,

                                    ////手续费
                                    ////2016-6-27 侍总决定不需要显示手续费了。
                                    //Commission = tradeCommissionAdded
                                    IsStrategy=isStrategy,
                                    IsCombo = isCombo,
                                };
                                dicLogicPositions.TryAdd(posKey, position);
                                Dispatcher.BeginInvoke(new Action(() => LogicPositionView.Add(position)));
                            }
                            orderBoardPositionQuant = position.Position;
                        }
                        break;
                }

                if (!string.IsNullOrEmpty(posKeyCompare))
                {
                    if (dicLogicPositions.TryGetValue(posKeyCompare, out positionCompare))
                    {
                        if (positionCompare.Position > orderBoardPositionQuant)
                            orderBoardPositionQuant = positionCompare.Position;

                        if (positionDirection == PosiDirection.多)
                            md.OrderBoardShortPositionQuant = positionCompare.Position.ToString();
                        else
                            md.OrderBoardLongPositionQuant = positionCompare.Position.ToString();
                    }
                }

                if (positionDirection == PosiDirection.多)
                    md.OrderBoardLongPositionQuant = orderBoardPositionQuant.ToString();
                else
                    md.OrderBoardShortPositionQuant = orderBoardPositionQuant.ToString();

                md.OrderBoardPositionQuant = orderBoardPositionQuant;
            }
        }

        private Strategy GetStrategy(string instrumentID,string orderRefPreix,StrategyStateType state)
        {
            var strategies=ocStrategy.Where(x => x.ListInstrumentID.Contains(instrumentID) && x.InstanceState== state);
            foreach (var item in strategies)
            {
                if (item.ListOrder != null )
                {
                    var orders = item.ListOrder.Where(x =>  x._iOrderRef!=null && x._iOrderRef.Contains(orderRefPreix));
                    if (orders != null && orders.Count() > 0)
                    {
                        return item;
                    }
                }
            }
            return null;
        }
        private void LogicPositionViewRemove(LogicPosition position1)
        {
            LogicPositionView.Remove(position1);
        }

        delegate void LogicPositionViewRemoveDelegate(LogicPosition position);

        private void PositionSummaryUpdate(TradeField value, InstrumentData instru)
        {
            //PositionData pos;
            //if (dicPosition.TryGetValue(value.investorID+value.instrumentID+value.Direction+'1', out pos)) return;  //重复成交数据
            PositionDataSummary position, position1;
            string posKey, posKey1;
            double tradeAmount = value.volume * value.price * instru.VolumeMultiple;
            posKey = value.investorID + value.instrumentID + value.Direction;
            posKey1 = value.investorID + value.instrumentID + (value.Direction == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多);

            int _OrderBoardPositionQuant = 0;
            switch (value.Offset)
            {
                case OffsetType.开仓:
                    if (dicPositionSummary.TryGetValue(posKey, out position))
                    {
                        position.AvgPrice = (position.AvgPrice * position.Position + tradeAmount / instru.VolumeMultiple) / (position.Position + value.volume);
                        position.OpenCost += tradeAmount;
                        position.OpenVolume += value.volume;
                        position.OpenAmount += tradeAmount;
                        position.Position += value.volume;
                        position.TodayPosition += value.Volume;
                        position.PositionCost += tradeAmount;
                        //position.Commission += value.Commission;
                        //position.Commission += value.Commission;
                    }
                    else
                    {
                        position = new PositionDataSummary()
                        {
                            AvgPrice = value.Price,
                            InstrumentID = value.InstrumentID,
                            BrokerID = value.BrokerID,
                            Direction = value.Direction,
                            ExchangeName = value.ExchangeName,
                            OpenVolume = value.Volume,
                            OpenCost = tradeAmount,
                            OpenAmount = tradeAmount,
                            //hedgeFlag = value.hedgeFlag,
                            Position = value.Volume,
                            PositionCost = tradeAmount,
                            TodayPosition = value.Volume,
                            //TradingDay = value.TradingDay,
                            //SettlementID = value.SettlementID,
                            InvestorID = value.InvestorID,
                            //PositionType = PositionDate,
                            //Commission = value.Commission
                        };
                        dicPositionSummary.TryAdd(posKey, position);
                        Dispatcher.BeginInvoke(new Action(() => PositionDataSummaryView.Add(position)));
                    }

                    break;
                default:  //各类平仓
                    {
                        if (dicPositionSummary.TryGetValue(posKey1, out position) && position.Position >= value.volume)
                        {
                            if (position.Position == value.volume)
                            {
                                Dispatcher.BeginInvoke(new Action(() => PositionDataSummaryView.Remove(position)));
                                dicPositionSummary.TryRemove(posKey1, out position);
                            }
                            else
                            {

                                position.PositionCost -= position.AvgPrice * value.volume;
                                position.Position -= value.volume;
                                position.CloseAmount += tradeAmount;
                                position.CloseVolume += value.volume;
                                //position.Commission += value.Commission;
                                //position.YdPosition -= value.volume;
                            }
                        }
                        else
                        {
                            Utility.WriteMemLog(MemLog, "error, close position not found " + value.instrumentID);
                            return;
                        }
                    }
                    break;
            }
            _OrderBoardPositionQuant = position.Position;
            if (dicPositionSummary.TryGetValue(posKey1, out position1))
                if (position1.Position > _OrderBoardPositionQuant)
                    _OrderBoardPositionQuant = position1.Position;
            if (position.Direction == PosiDirection.多)
                dicMarketData[instru.InstrumentID].OrderBoardLongPositionQuant = position.Position.ToString();
            else
                dicMarketData[instru.InstrumentID].OrderBoardShortPositionQuant = position.Position.ToString();
            dicMarketData[instru.InstrumentID].OrderBoardPositionQuant = _OrderBoardPositionQuant;
        }

        private bool PositionDetailUpdate(TradeField value, InstrumentData instru)
        {
            string key;
            PositionDetail pos;
            double tradeAmount = value.volume * value.price * instru.VolumeMultiple;
            var md = dicMarketData[value.InstrumentID];
            InstrumentMarginRate marginRate;
            T.dicMarginRate.TryGetValue(value.instrumentID + value.Hedge, out marginRate);
            switch (value.Offset)
            {
                case OffsetType.开仓:
                    key = value.InvestorID + value.tradingDay + value.TradeID; //（这里，tradingDay就是OpenDate）
                    pos = new PositionDetail()
                    {
                        BrokerID = value.BrokerID,
                        //CloseAmount = value.CloseAmount,
                        //CloseProfitByDate = value.CloseProfitByDate,
                        //CloseProfitByTrade = value.CloseProfitByTrade,
                        //CloseVolume = value.CloseVolume,
                        //CombInstrumentID = value.CombInstrumentID,
                        Direction = value.Direction,// == '0' ? DirectionType.多 : DirectionType.空,
                        ExchangeID = value.ExchangeID,
                        //ExchMargin = value.e
                        HedgeFlag = value.Hedge,
                        InstrumentID = value.InstrumentID,
                        InvestorID = value.InvestorID,
                        //LastSettlementPrice = value.//LastSettlementPrice,
                        //Margin = value.ma,
                        //MarginRateByMoney = value
                        //MarginRateByVolume = value.MarginRateByVolume,
                        OpenDate = value.tradeDate,
                        OpenPrice = value.Price,
                        //PositionProfitByDate = value.PositionProfitByDate,
                        //PositionProfitByTrade = value.PositionProfitByTrade,
                        SettlementID = value.SettlementID,
                        SettlementPrice = md.SettlementPrice,
                        TradeID = value.TradeID,
                        TradeType = (TradeType)value.tradeType,
                        TradingDay = value.TradingDay,
                        Volume = value.Volume,
                        Commission = value.Commission
                    };
                    if (value.Direction == PosiDirection.多)
                    {
                        if (marginRate == null)
                        {
                            pos.Margin = 0;
                            pos.MarginRateByMoney = 0;
                            pos.MarginRateByVolume = 0;
                        }
                        else
                        {
                            pos.Margin = (marginRate.LongMarginRatioByMoney == 0) ? value.volume * marginRate.LongMarginRatioByVolume : tradeAmount * marginRate.LongMarginRatioByMoney;
                            pos.MarginRateByMoney = marginRate.LongMarginRatioByMoney;
                            pos.MarginRateByVolume = marginRate.LongMarginRatioByVolume;
                        }
                        pos.ExchMargin = instru.LongMarginRatio * tradeAmount;
                    }
                    else
                    {
                        if (marginRate == null)
                        {
                            pos.Margin = 0;
                            pos.MarginRateByMoney = 0;
                            pos.MarginRateByVolume = 0;
                        }
                        else
                        {
                            pos.Margin = (marginRate.ShortMarginRatioByMoney == 0) ? value.volume * marginRate.ShortMarginRatioByVolume : tradeAmount * marginRate.ShortMarginRatioByMoney;
                            pos.MarginRateByMoney = marginRate.ShortMarginRatioByMoney;
                            pos.MarginRateByVolume = marginRate.ShortMarginRatioByVolume;
                        }
                        pos.ExchMargin = instru.ShortMarginRatio * tradeAmount;
                    }

                    Dispatcher.BeginInvoke(new Action(() => PositionDetailView.Add(pos)));
                    dicPositionDetails.TryAdd(key, pos);
                    return true;
                default:  //各类平仓,维护持仓明细数据，保留持仓数为零的记录
                    {
                        var posDetails = dicPositionDetails.Values.ToList().Where(x => x.InstrumentID == value.InstrumentID && x.HedgeFlag == value.Hedge &&
                        x.Direction == (value.Direction == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多) && x.Volume > 0).ToList();   //找反向仓位明细以平仓
                        if (posDetails.Count == 0)
                        {
                            Utility.WriteMemLog(MemLog, "no enough position to close " + value.instrumentID + " " + value.volume);
                            return false;
                        }
                        posDetails.Sort();   //此处排序需要颠倒顺序？
                        int i, j = 0;

                        for (i = 0; i < posDetails.Count; i++)
                        {
                            j += posDetails[i].Volume;
                            key = posDetails[i].InvestorID + posDetails[i].TradingDay + posDetails[i].TradeID;
                            if (j <= value.volume)
                            {
                                posDetails[i].CloseAmount = posDetails[i].Volume * value.price * instru.VolumeMultiple;
                                posDetails[i].CloseVolume += posDetails[i].Volume;
                                posDetails[i].Volume = 0;
                                posDetails[i].CloseProfitByTrade += (posDetails[i].Direction == PosiDirection.多 ?
                                    value.price - posDetails[i].OpenPrice : posDetails[i].OpenPrice - value.Price) * instru.VolumeMultiple * value.Volume;
                                posDetails[i].Commission += value.Commission;
                                posDetails[i].CloseProfitByDate += (posDetails[i].Direction == PosiDirection.多 ?
                                    value.price - md.PreSettlementPrice : md.preSettlementPrice - value.price) * instru.VolumeMultiple * value.volume;
                                posDetails[i].PositionProfitByTrade = 0;
                                posDetails[i].PositionProfitByDate = 0;
                                posDetails[i].ExchMargin = 0;
                                posDetails[i].Margin = 0;

                                if (j == value.volume)
                                    break;
                            }
                            else   //部分平仓，修改持仓数据后返回 j>value.volume
                            {
                                //pos = posDetails[i];
                                posDetails[i].Volume -= j - value.volume;
                                posDetails[i].CloseAmount = value.volume * value.price * instru.VolumeMultiple;
                                posDetails[i].CloseVolume = value.volume;
                                posDetails[i].CloseProfitByTrade = (posDetails[i].Direction == PosiDirection.多 ?
                                    value.price - posDetails[i].OpenPrice : posDetails[i].OpenPrice - value.Price) * instru.VolumeMultiple * value.Volume;
                                posDetails[i].PositionProfitByTrade = (posDetails[i].Direction == PosiDirection.多 ?
                                    value.price - posDetails[i].OpenPrice : posDetails[i].OpenPrice - value.price) * posDetails[i].Volume;
                                posDetails[i].Commission += value.Commission;
                                break;
                            }
                        }
                        if (j < value.volume) //报错，无对应平仓的持仓
                        {
                            Utility.WriteMemLog(MemLog, "no enough position to close " + value.instrumentID + " " + value.volume);
                            return false;
                        }
                    }
                    return true;
            }
        }


        private void trade_OnRtnCancel(object sender, OrderArgs e)
        {
            //_queueOrderFresh.Enqueue(e.Value.OrderLocalID);	//刷新时用
            Ring("撤单");
        }

        private void trade_OnRspQrySettlementInfo(object sender, EventArgs e)
        {
            //如果是第一次查询投资者持仓，则开始异步查询自选合约组和持仓中合约的并集的交易费和保证金
            if (!investorIsLogined)
            {
                //QryInstrumentCommissionRate(Q.SubscribedInstrumentIDs);
                //QryInstrumentMarginRate(Q.SubscribedInstrumentIDs);
            }
            investorIsLogined = true;
        }

        private void trade_OnRspUserLogin(object sender, ErrorEventArgs e)
        {
            //if(onrsp)
            ShowMsg(e.ErrorMsg);
        }
        #endregion

        private void MarketDataListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            MarketDataGrid.SelectedIndex = MarketDataListBox.SelectedIndex;
        }

        #region 行情、持仓、成交等数据列显示条目的设置
        private void AccountDataGridColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.TradingAccountColumn);
        }

        private void MarketDataColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.MarketColumn);
        }

        private void InstrumentListColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.InstrumentColumn);
        }

        private void TodayOrdersColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.OrderColumn);

        }

        private void UnsettledOrderColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.UnsettledOrderColumn);

        }

        private void ComplexOrderSetColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.ParkedOrderColumn);

        }

        private void SettledOrderColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.SettledOrderColumn);

        }

        private void PositionSummaryGridColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.PositionSummaryColumn);

        }

        private void PositionDetailsGridColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.PositionColumn);

        }

        private void ComboPositionGridColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.ComboPositionColumn);

        }

        private void TradeRecordSummaryColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.TradeSummaryColumn);

        }

        private void TradeRecordDetailsColumnSet_Click(object sender, RoutedEventArgs e)
        {
            MultipleSettingsWindow settingWin = new MultipleSettingsWindow(SettingsType.TradeColumn, this);
            settingWin.ShowDialog();
        }
        #endregion

        //实现点击“报价表”时显示指定价功能（动态跟盘价还未实现）

        #region 账户 系统菜单
        private void EnqTradingAccount_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (T == null || !T.IsLogin)
                {
                    MemLog.Enqueue(DateTime.Now.ToString("HH:mm:ss.fff") + " system has logout");
                    Ring("指令单错误");
                    ShowMsg("账户登出, 请重新登入!");
                    return;
                }
                else
                {
                    AccountInfoWindow accountWin = new AccountInfoWindow();
                    accountWin.ShowDialog();
                }
                //T.ReqQryAccount();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void EnqControlCenter_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                InvestorServiceWindow investorServiceWin = new InvestorServiceWindow();
                investorServiceWin.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void PasswordUpdate_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                UserPwdUpdateWindow userPwdUpdate = new UserPwdUpdateWindow(this);
                userPwdUpdate.ShowDialog();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void Relogin_Click(object sender, RoutedEventArgs e)
        {

            Task<bool> task = new Task<bool>(() => ReloginProcess());
            task.Start();
            task.ContinueWith((t) => { string msg = "重新登录" + (t.Result ? "成功" : "失败"); ShowMsg(msg); });

        }

        private bool ReloginProcess()
        {
            //先退出，再登录
            Task t = Task.Run(() =>
            {
                if (T != null || T.IsLogin)
                    T.ReqUserLogout();
                if (Q != null || Q.IsLogin)
                {
                    Q.ReqUnSubscribeMarketData(Q.SubscribedInstrumentIDs);
                    Q.ReqUserLogout();
                }
            });
            t.Wait();
            string msg = string.Format("交易账号({0})已经登出", Trader.Configuration.Investor.ID);
            MemLog.Enqueue(DateTime.Now.ToString("HH:mm:ss.fff") + msg);
            ShowMsg(msg);

            string interfacedll1 = "ctp_trade_proxy.dll";
            string interfacedll2 = "ctp_quote_proxy.dll";
            T = new Trade(interfacedll1)
            {
                Server = "tcp://" + Trader.TradingServer[0],
                Broker = Trader.DefaultBrokerID,
                Password = T.Password,
                Investor = T.Investor,
                main = this
            };

            Q = new Quote(interfacedll2)
            {
                Server = "tcp://" + Trader.MarketServer[0],
                Broker = Trader.DefaultBrokerID,
                Password = T.Password,
                Investor = T.Investor,
                main = this
            };

            Q.ReqConnect();
            int timeout_Seconds = 20;
            msg = "请求连接前置机";
            ShowMsg(msg);
            T.ReqConnect();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //连接前置机超时
                msg = "请求连接前置机超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求用户登录");
            T.ReqUserLogin();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求用户登录超时
                msg = "请求用户登录超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求结算单确认");
            T.ReqSettlementInfoConfirm();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求结算单确认超时
                msg = "请求结算单确认超时";
                ShowMsg(msg);
                return false;
            }
            ShowMsg("请求查询资金账号");
            T.ReqQryAccount();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求查询资金账号超时
                msg = "请求查询资金账号超时";
                ShowMsg(msg);
                return false;
            }

            //由于合约信息(合约，手续费，保证金率)保存在本地，loginEvent需要在请求内部处理

            ShowMsg("请求查询持仓合约交易费");
            T.ReqQryInstrumentCommissionRate("");
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求查询持仓合约交易费超时
                msg = "请求查询持仓合约交易费超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求查询持仓合约的保证金率");
            T.ReqQryInstrumentMarginRate(new QryInstrumentMarginRateField());
            //T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求查询持仓合约的保证金率超时
                msg = "请求查询持仓合约的保证金率超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求查询合约信息");
            T.ReqQryInstrument(new QryInstrumentField());
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds * 2)))
            {
                //请求查询合约信息超时
                msg = "请求查询合约信息超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求查询持仓明细");
            T.ReqQryInvestorPositionDetail();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds * 2)))
            {
                //请求查询持仓明细超时
                msg = "请求查询持仓明细超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求查询投资者持仓");
            T.ReqQryPosition();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求查询投资者持仓超时
                msg = "请求查询投资者持仓超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求查询报单信息");
            T.ReqQryOrder();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求查询报单信息超时
                msg = "请求查询报单信息超时";
                ShowMsg(msg);
                return false;
            }

            ShowMsg("请求查询成交信息");
            T.ReqQryTrade();
            T.loginEvent.Reset();
            if (!T.loginEvent.Wait(new TimeSpan(0, 0, timeout_Seconds)))
            {
                //请求查询成交信息超时
                msg = "请求查询成交信息超时";
                ShowMsg(msg);
                return false;
            }
            msg = string.Empty;
            Utility.WriteMemLog(TQMain.MemLog, " Login again");
            //ShowMsg("账户重新登入成功");

            if (Q != null && Q.IsLogin)
            {
                Q.ReqSubscribeMarketData(Q.SubscribedInstrumentIDs);
            }
            return true;

        }

        private void SwitchAccount_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //现对当前账户做退出操作
                investorIsLogined = false;
                dicMarketData.Clear();
                Task t = Task.Run(() =>
                {
                    if (T != null || T.IsLogin) T.ReqUserLogout();
                    if (Q != null || Q.IsLogin)
                    {
                        Q.ReqUnSubscribeMarketData(Q.SubscribedInstrumentIDs);
                        Q.ReqUserLogout();
                    }
                });
                t.Wait();
                string msg = string.Format("交易账号({0})已经登出", Trader.Configuration.Investor.ID);
                MemLog.Enqueue(DateTime.Now.ToString("HH:mm:ss.fff") + msg);
                ShowMsg(msg);
                //再打开登录界面，进行切换账户操作
                LoginWindow = new LoginWindow(this);
                if (LoginWindow.ShowDialog() != true)
                {
                    Relogin_Click(sender, e);
                    //MemLog.Enqueue(DateTime.Now.ToString("HH:mm:ss.fff") + " unable to Login(Trade, Quote)");
                    //LoginWindow.Close();
                    //if (TQMain.T != null) TQMain.T.ReqUserLogout();
                    //if (TQMain.Q != null) TQMain.Q.ReqUserLogout();
                    //Thread.Sleep(1500);
                    //this.Close();
                    return;
                }
                msg = string.Format("user has switched to {0}", Trader.Configuration.Investor.ID);
                MemLog.Enqueue("{0}\t" + msg);
                ShowMsg(msg);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void Exit(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        #endregion

        #region 标准下单板

        private void btnReset_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.CurrentMarketData.ResetOrderBoard();
        }

        private void OrderBtn_Click(object sender, RoutedEventArgs e)
        {
            if (((Button)sender).Name == "LongBtn" || ((Button)sender).Name == "btnAsk")
                ViewModel.CurrentMarketData.OrderBoardTradeDirection = TradeDirection.多;
            else
                ViewModel.CurrentMarketData.OrderBoardTradeDirection = TradeDirection.空;

            //another thread to run dialog
            if (Trader.Configuration.ConfirmOrder)
            {
                var orderdetailsinfo = (ViewModel.CurrentMarketData.OrderBoardTradeDirection == TradeDirection.多 ? "买入 " : "卖出 ")
                                   + " (" + ViewModel.CurrentMarketData.InstrumentID + ") " +
                                   ViewModel.CurrentMarketData.OrderBoardQuant.ToString() + "张?";
                Task.Run(() =>
                {
                    var mr = MessageBox.Show(orderdetailsinfo, "确认订单", MessageBoxButton.YesNo);
                    if (mr != MessageBoxResult.Yes)
                        return;
                    Dispatcher.BeginInvoke(DispatcherPriority.Send, new Action(() =>
                    {
                        if (ViewModel.CurrentMarketData.IsCombo)
                        {
                            T.ReqOrderInsert((Combo)ViewModel.CurrentMarketData, ViewModel.CurrentMarketData.OrderBoardTradeDirection, ViewModel.CurrentMarketData.OrderBoardQuant, Utility.GetCustOrderRef());
                        }
                        else T.ReqOrderInsert(ViewModel.CurrentMarketData, ViewModel.CurrentMarketData.OrderBoardTradeDirection, ViewModel.CurrentMarketData.OrderBoardQuant);
                    }));
                });
            }
            else if (ViewModel.CurrentMarketData.IsCombo)
            {

                T.ReqOrderInsert((Combo)ViewModel.CurrentMarketData, ViewModel.CurrentMarketData.OrderBoardTradeDirection, ViewModel.CurrentMarketData.OrderBoardQuant, Utility.GetCustOrderRef());
            }
            else T.ReqOrderInsert(ViewModel.CurrentMarketData, ViewModel.CurrentMarketData.OrderBoardTradeDirection, ViewModel.CurrentMarketData.OrderBoardQuant);
            //Utility.WriteMemLog(MemLog, "Orderfinish" + PreciseTimer.GetPreciseTime());
        }

        private void ClosePosBtn_Click(object sender, RoutedEventArgs e)
        {
            //Utility.WriteMemLog(MemLog, "Enter Time "+PreciseTimer.GetPreciseTime(ExchangeType.SHFE).ToString("HH:mm:ss.fffff"));
            //DateTime dt1 = PreciseTimer.GetPreciseTime(ExchangeType.SHFE);
            if (Trader.Configuration.ConfirmOrder == true)
            {
                MessageBoxResult mr = MessageBoxResult.None;

                Task t = Task.Run(new Action(() =>
                {
                    mr = MessageBox.Show("确认清仓 (" + ViewModel.CurrentMarketData.InstrumentID + ")?", "确认清仓", MessageBoxButton.YesNo);
                    if (mr == MessageBoxResult.Yes)
                        Dispatcher.BeginInvoke(new Action(() =>
                        {
                            T.ReqCloseBiDirectionalPositions(ViewModel.CurrentMarketData);
                        }));
                }));
            }
            else
            {
                T.ReqCloseBiDirectionalPositions(ViewModel.CurrentMarketData);
            }
        }

        private void IntellectualOrder_Click(object sender, RoutedEventArgs e)
        {
            string instrumentID = "rb1610";
            PosiDirection direction = PosiDirection.多; string exchangeID = "SHFE";
            InstrumentData instru;
            if (TQMain.dicInstrumentData.TryGetValue(instrumentID, out instru))
            {
                exchangeID = Utility.GetExchangeID(instru.ExchangeID);
            }
            OrderPriceType orderPriceType = OrderPriceType.卖一价;
            double orderPrice = 2040;
            double stopPrice = 2050;
            int volume = 1;
            ParkedOrderField parkedOrder = new ParkedOrderField()
            {
                BrokerID = Trader.DefaultBrokerID,
                ContingentCondition = (char)ContingentConditionType.卖一价小于等于条件价,

                Direction = (char)direction,
                ExchangeID = exchangeID,
                ForceCloseReason = (char)ForceCloseReasonType.非强平,
                InstrumentID = instrumentID,
                InvestorID = Trader.Configuration.Investor.ID,
                IsAutoSuspend = 0,
                OrderPriceType = (char)orderPriceType,
                LimitPrice = orderPrice,
                MinVolume = 1,
                TimeCondition = (orderPriceType == OrderPriceType.任意价) ? (char)TimeConditionType.IOC : (char)TimeConditionType.GFD,
                VolumeCondition = (char)VolumeConditionType.任何数量,
                VolumeTotalOriginal = volume,
                StopPrice = stopPrice
            };
            parkedOrder.CombHedgeFlag = Convert.ToString((char)SysEnum.HedgeFlagType.Speculation);
            parkedOrder.CombOffsetFlag = Convert.ToString((char)OffsetType.开仓);
            T.ReqParkedOrderInsert(parkedOrder);
            //IntellectualOrderWindow parkedOrder = new IntellectualOrderWindow(this, orderboard);
            //parkedOrder.Show();
        }


        private void OrderBoardTabCtrl_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyboardDevice.Modifiers.Equals(Key.LeftAlt) && e.Key == Key.B)
                MessageBox.Show(e.ToString());
        }

        private void tglbtnQuantMode_Click(object sender, RoutedEventArgs e)
        {
            //string posKey = Trader.Configuration.Investor.ID + orderboard.InstrumentID;
            //switch (tglbtnQuantMode.IsChecked)
            //{
            //    case null:
            //        orderboard.quantMode = QuantMode.Default;
            //        break;
            //    case true:
            //        orderboard.quantMode = QuantMode.Preset;
            //        break;
            //    case false:
            //        orderboard.quantMode = QuantMode.AllAvailable;
            //        break;
            //}

            ////orderboard.Quant = 0;
            //switch (orderboard.quantMode)
            //{
            //    case (QuantMode.AllAvailable):
            //        {
            //            //setup the orderboard.Quant as inquiry all available quant of this instrument
            //            PositionDataSummary posi;
            //            orderboard.Quant = 0;
            //            if (dicPositionSummary.TryGetValue(posKey + DirectionType.多, out posi))
            //                orderboard.Quant = posi.Position;
            //            if (dicPositionSummary.TryGetValue(posKey + DirectionType.空, out posi))
            //                orderboard.Quant = posi.Position > orderboard.Quant ? posi.Position
            //                   : orderboard.Quant;
            //            //if (orderboard.Quant == 0)
            //            //{
            //            //    orderboard.Quant = 0;//(itemIndex < 0) ? 1 : Trader.DefaultInstrumentQuant[itemIndex].DefaultQuant;
            //            //}
            //        }
            //        break;
            //    case (QuantMode.Preset):
            //        //orderboard.Quant = 1;
            //        break;
            //    case (QuantMode.Default):
            //    default:
            //        InstrumentData inst;
            //        if(dicInstrumentData.TryGetValue(orderboard.InstrumentID,out inst))
            //        {
            //            orderboard.Quant = Trader.Configuration.GetDefaultQuant(inst.InstrumentID, inst.ProductID);
            //        }
            //        else
            //        {
            //            orderboard.Quant = Trader.Configuration.DefaultQuant;
            //        }
            //        break;
            //}

        }

        private void tglbtnPriceMode_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.RefreshOrderBoardPrice();
            //if (!tglbtnPriceMode.IsChecked.HasValue)
            //{
            //    orderboard.priceMode = PriceMode.Opposite;
            //    orderboard.OrderPrice = 0;
            //    //orderboard.ScrollBarPriceRefresh = false;
            //}
            //else
            //    if (tglbtnPriceMode.IsChecked == false)
            //{
            //    orderboard.priceMode = PriceMode.PreSet;
            //    orderboard.ScrollBarPriceRefresh = true;
            //    MarketData dmd;
            //    if (dicMarketData.TryGetValue(orderboard.InstrumentID, out dmd))
            //        orderboard.OrderPrice = dmd.LastPrice;
            //}
            //else
            //{
            //    orderboard.priceMode = PriceMode.Ownside;
            //    orderboard.OrderPrice = 0;
            //    orderboard.ScrollBarPriceRefresh = false;
            //}
        }

        private void scrollbarNum_Scroll(object sender, ScrollEventArgs e)
        {
            //tglbtnQuantMode.IsChecked = true;
            //orderboard.quantMode = QuantMode.Preset;
            //orderboard.Quant = (int)scrollbarNum.Value;

            //ViewModel.UserJustScrollOrderBoardPrice(e);

            //this.scrollbarNum.SelectAll();

            if (scrollbarNum.Value == 0)
            {
                scrollbarNum.Value = 1;
            }

            //if (e.NewValue == 0)
            //    e.Handled = true;
        }

        private void scrollbarPrice_MouseEnter(object sender, MouseEventArgs e)
        {
            ViewModel.UserMouseEnterOrderBoardPrice();
        }

        private void scrollbarPrice_MouseLeave(object sender, MouseEventArgs e)
        {
            ViewModel.UserMouseOutOrderBoardPrice();

        }

        private void scrollbarPrice_KeyUp(object sender, KeyEventArgs e)
        {
            ViewModel.UserJustInputOrderBoardPrice();
        }

        private void scrollbarPrice_Scroll(object sender, ScrollEventArgs e)
        {
            //tglbtnPriceMode.IsChecked = false;
            //orderboard.priceMode = PriceMode.PreSet;
            //orderboard.ScrollBarPriceRefresh = false;

            //this.scrollbarPrice.SelectAll();

            ViewModel.UserJustInputOrderBoardPrice();
        }

        private void txtblkUpperLPrice_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //tglbtnPriceMode.IsChecked = false;
            //orderboard.priceMode = PriceMode.PreSet;
            //this.scrollbarPrice.Value = Convert.ToDouble(txtblkUpperLPrice.Text);
        }

        private void txtblkAskPrice_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //tglbtnPriceMode.IsChecked = false;
            //this.scrollbarPrice.Value = Convert.ToDouble(txtblkAskPrice.Text);
        }

        private void txtblkBidPrice_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //this.scrollbarPrice.Value = Convert.ToDouble(txtblkBidPrice.Text);
        }

        private void txtblkLowerLPrice_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            //tglbtnPriceMode.IsChecked = false;
            //orderboard.priceMode = PriceMode.PreSet;
            //this.scrollbarPrice.Value = Convert.ToDouble(txtblkLowerLPrice.Text);
        }

        private void txtblkUpperLPrice_MouseEnter(object sender, MouseEventArgs e)
        {
            //tglbtnPriceMode.IsChecked = false;
            //txtblkUpperLPrice.Cursor = Cursors.Hand;
        }

        private void txtblkAskPrice_MouseEnter(object sender, MouseEventArgs e)
        {
            //txtblkAskPrice.Cursor = Cursors.Hand;
        }

        private void txtblkBidPrice_MouseEnter(object sender, MouseEventArgs e)
        {
            //txtblkBidPrice.Cursor = Cursors.Hand;
        }

        private void txtblkLowerLPrice_MouseEnter(object sender, MouseEventArgs e)
        {
            //txtblkLowerLPrice.Cursor = Cursors.Hand;
        }

        private void SelectInstrument_Click(object sender, EventArgs e)
        {
            MarketData md;
            if (sender is Button)
            {
                string instrumentID = ((Button)sender).Content.ToString();
                if (dicMarketData.TryGetValue(instrumentID, out md))
                    UpdateOrderBoard(dicMarketData[instrumentID]);
                else
                {
                    //md = new MarketData(instrumentID);
                    //dicMarketData.TryAdd(instrumentID, md));
                    //MarketDataView.Add(md);
                }
            }
        }
        private void txtInstrumentID_GotMouseCapture(object sender, MouseEventArgs e)
        {
            InitProductPopup();
            popProduct.IsOpen = true;

        }

        private void popProduct_MouseLeave(object sender, MouseEventArgs e)
        {
            if (txtBoxInstrumentID.IsMouseOver == true | svProduct.IsMouseOver == true)
                popProduct.StaysOpen = true;
            else popProduct.IsOpen = false;
        }

        private void SelectProduct_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button)
            {
                popProduct.IsOpen = false;
                Button btn = sender as Button;
                string productName = btn.Content.ToString();
                string productID = btn.Tag.ToString();
                InitInstrumentPopup(productID);
                popInstrument.IsOpen = true;
            }
        }
        #endregion

        private void BanktoFutureTransfer_Click(object sender, RoutedEventArgs e)
        {
            BankFuturesTransferWindow bftWin = new BankFuturesTransferWindow(this);
            if (!Trader.IsSimAccount)
            {
                T.ReqQryContractBank(Trader.DefaultBrokerID);
                Thread.Sleep(1000);
            }
            bftWin.ShowDialog();
        }

        #region 查询系统菜单

        private void EnqInstruments_Click(object sender, RoutedEventArgs e)
        {
            InstrumentWindow instWin = new InstrumentWindow();
            instWin.ShowInTaskbar = false;
            instWin.Show();
            //T.ReqQryInstrument(new QryInstrumentField());

        }

        private void EnqPositions_Click(object sender, RoutedEventArgs e)
        {
            T.ReqQryPosition();
        }

        private void EnqTrades_Click(object sender, RoutedEventArgs e)
        {
            T.ReqQryTrade();
        }

        private void EnqOrders_Click(object sender, RoutedEventArgs e)
        {
            T.ReqQryOrder();
        }

        private void EnqHistoricalSettlementInfo_Click(object sender, RoutedEventArgs e)
        {
            SettlementWindow settlement = new SettlementWindow(this, QueryRangeType.UserDefined);
            settlement.ShowDialog();
        }

        private void BrokerNotice_Click(object sender, RoutedEventArgs e)
        {
            T.ReqQryNotice();
            Thread.Sleep(1000);
            NoticeWindow noticeWin = new NoticeWindow("期商通知");
            noticeWin.ShowDialog();
        }

        private void TradeNotice_Click(object sender, RoutedEventArgs e)
        {
            T.ReqQryTradingNotice();
            Thread.Sleep(1000);
            NoticeWindow noticeWin = new NoticeWindow("交易通知");
            noticeWin.ShowDialog();
        }

        private void miQryTradeLog_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TradeLogWindow tradeLogWin = new TradeLogWindow();
                tradeLogWin.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }


        private void miQryInstMgr_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Thread thread = new Thread(() =>
                {
                    var instMgrWin = new InstMgrWindow();
                    instMgrWin.ShowInTaskbar = false;
                    instMgrWin.Show();
                    System.Windows.Threading.Dispatcher.Run();
                    instMgrWin.Closed += (sender2, e2) =>
                    instMgrWin.Dispatcher.InvokeShutdown();
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void miQryInstCommission_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Thread thread = new Thread(() =>
                {
                    var instCommissionWin = new InstCommissionWindow ();
                    instCommissionWin.ShowInTaskbar = false;
                    instCommissionWin.Show();
                    System.Windows.Threading.Dispatcher.Run();
                    instCommissionWin.Closed += (sender2, e2) =>
                    instCommissionWin.Dispatcher.InvokeShutdown();
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region 报价表 区域处理

        private void MarketDataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.AddedItems.Count > 0)
            {
                var m = e.AddedItems[0] as MarketData;

                if (m != null)
                {
                    UpdateOrderBoard(m, true);
                }
            }
        }
        private void MarketDataGrid_PreviewMouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            //展示合约日内分时图
            string winname;
            if ((winname = Trader.CurrInstrumentList[MarketDataGrid.SelectedIndex]) != null) return;
            Thread thread1 = new Thread(() =>
            {
                SingleInstruWin w = new SingleInstruWin(this);
                w.Show();
                //(MarketData)((DataGrid)sender).SelectedIndex
                w.Closed += (o, e1) =>
                {
                    w.Dispatcher.InvokeShutdown();
                    DicWindow.Remove(w.InstrumentID);
                };
                System.Windows.Threading.Dispatcher.Run();
                DicWindow.Add(winname, w);
            });

            thread1.SetApartmentState(ApartmentState.STA);
            thread1.IsBackground = true;
            thread1.Start();
        }

        private void miSelectCustCntrGrp_MouseEnter(object sender, MouseEventArgs e)
        {
            //生成所有自选合约组的选项
            miSelectCustCntrGrp.Items.Clear();

            List<string> groupList = new List<string>();
            groupList = Trader.Configuration.GetInstrumentGroupNames();
            groupList.Remove(Trader.Configuration.DefaultInstrumentIDGroup);
            foreach (var group in groupList)
            {
                MenuItem miGroup = new MenuItem();
                miGroup.Header = group;
                miGroup.Click += miGroup_Click;
                miGroup.IsEnabled = true;
                miSelectCustCntrGrp.Items.Add(miGroup);
            }
        }

        void miGroup_Click(object sender, RoutedEventArgs e)
        {
            string group = (e.OriginalSource as MenuItem).Header.ToString();
            SwitchOrUpdateInstrumentIDsGroup(group);
        }

        private void MarketDataAutoAdjustColumnWidth_Click(object sender, RoutedEventArgs e)
        {

        }
        #endregion

        #region 报告查询

        /// <summary>
        /// 自定义查询日期范围查询报告
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QueryUserDefinedReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Thread thread = new Thread(() =>
                {
                    var accountReportWindow = new AccountReportWindow(QueryRangeType.UserDefined);
                    accountReportWindow.Show();
                    System.Windows.Threading.Dispatcher.Run();
                    accountReportWindow.Closed += (sender2, e2) =>
                    accountReportWindow.Dispatcher.InvokeShutdown();
                });
                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        /// <summary>
        /// 查询今日报告
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QueryTodayReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //AccountReportWindow Report = new AccountReportWindow(this, QueryRangeType.Today);
                //Report.ShowDialog();
                Thread thread = new Thread(() =>
                {
                    var accountReportWindow = new AccountReportWindow(QueryRangeType.Today);
                    accountReportWindow.Show();
                    System.Windows.Threading.Dispatcher.Run();
                    accountReportWindow.Closed += (sender2, e2) =>
                    accountReportWindow.Dispatcher.InvokeShutdown();
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// 查询最近一周报告
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QueryWeekReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                AccountReportWindow Report = new AccountReportWindow(this, QueryRangeType.NearWeek);
                Report.ShowDialog();
                Thread thread = new Thread(() =>
                {
                    var accountReportWindow = new AccountReportWindow(QueryRangeType.NearWeek);
                    accountReportWindow.Show();
                    System.Windows.Threading.Dispatcher.Run();
                    accountReportWindow.Closed += (sender2, e2) =>
                    accountReportWindow.Dispatcher.InvokeShutdown();

                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        /// <summary>
        /// 查询最近一月报告
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QueryMonthReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //AccountReportWindow Report = new AccountReportWindow(this, QueryRangeType.NearMonth);
                //Report.ShowDialog();
                Thread thread = new Thread(() =>
                {
                    var accountReportWindow = new AccountReportWindow(QueryRangeType.NearMonth);
                    accountReportWindow.Show();
                    System.Windows.Threading.Dispatcher.Run();
                    accountReportWindow.Closed += (sender2, e2) =>
                    accountReportWindow.Dispatcher.InvokeShutdown();

                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region 未成交单处理
        private void btnOrderCancel_Click(object sender, RoutedEventArgs e)
        {
            bool b = true;
            if (b)
                ViewModel.UserMouseEnterOrderBoardPrice();
            if (UnsettledOrdersGrid.SelectedIndex >= 0)
            {
                OrderData order = UnsettledOrdersGrid.SelectedItem as OrderData;
                DeleteUnsettledOrder(order);
            }
            else
                ShowMsg("未选中欲撤单");
        }
        private void btnOrdersCancel_Click(object sender, RoutedEventArgs e)
        {
            if (dicOrder.Count < 1)
            {
                return;
            }
            var orders = dicOrder.Values.ToList().FindAll(x => x.OrderStatus == OrderStatusType.未成交不在队列中 || x.OrderStatus == OrderStatusType.部分成交还在队列中
            || x.OrderStatus == OrderStatusType.部分成交不在队列中 || x.OrderStatus == OrderStatusType.未成交还在队列中 || x.OrderStatus == OrderStatusType.未知);
            DeleteAllUnsettledOrder(orders);
        }

        #endregion

        #region 所有委托单处理

        #endregion
        private void CanceledOrdersColumnSet_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.CanceledOrdersColumn);
        }
        #region 预埋-条件单委托事件处理

        private void ComplexOrderGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        //全部
        private void condAllRadBtn_Checked(object sender, RoutedEventArgs e)
        {

        }
        //预埋
        private void condParkedRadBtn_Checked(object sender, RoutedEventArgs e)
        {
            // ParkedOrderView = ParkedOrderView.ToList().Where(c => c.StopPrice == 0);
            var tempList = ParkedOrderView.ToList().Where(c => c.StopPrice == 0);
            ParkedOrderView.Clear();
            foreach (var item in tempList)
            {
                ParkedOrderView.Add(item);
            }
        }
        //条件
        private void condCondRadBtn_Checked(object sender, RoutedEventArgs e)
        {
            //ParkedOrderView = ParkedOrderView.ToList().Where(c => c.StopPrice !=0);
            var tempList = ParkedOrderView.ToList().Where(c => c.StopPrice != 0);
            ParkedOrderView.Clear();
            foreach (var item in tempList)
            {
                ParkedOrderView.Add(item);
            }
        }

        //已发送
        private void condSendRadBtn_Checked(object sender, RoutedEventArgs e)
        {
            //ParkedOrderView = ParkedOrderView.ToList().Where(c => c.OrderStatus == EnumDescription.GetFieldText(ParkedOrderStatusType.Send));
            var tempList = ParkedOrderView.ToList().Where(c =>c.OrderStatus == OrderStatusType.已触发);
            ParkedOrderView.Clear();
            foreach (var item in tempList)
            {
                ParkedOrderView.Add(item);
            }
        }

        //删除
        private void condDelBtn_Click(object sender, RoutedEventArgs e)
        {
            //0.如果没有选中项，则提示
            //1.如果是还没有触发的条件单，删除即为撤单；如果已触发，则移除
            //2.如果是还没有触发的服务器预埋单，删除即为撤销预埋单；如果已触发，则移除
            //3.如果是（还没有）手动发出的手动预埋单，删除即为移除该手动预埋单
            OrderData order = ParkedOrderView[ComplexOrderGrid.SelectedIndex];
            if (ComplexOrderGrid.SelectedIndex >= 0)
            {

                //if(ComplexOrderGrid.[ComplexOrderGrid.SelectedIndex])
                if (ParkedOrderView[ComplexOrderGrid.SelectedIndex].StopPrice != 0)//条件单
                {
                    if (ParkedOrderView[ComplexOrderGrid.SelectedIndex].OrderStatus == OrderStatusType.已触发)
                    {
                        ParkedOrderView.RemoveAt(ComplexOrderGrid.SelectedIndex);
                    }
                    else if (ParkedOrderView[ComplexOrderGrid.SelectedIndex].OrderStatus == OrderStatusType.尚未触发)//撤单
                    {
                        InputOrderActionField inputOrderAction = new InputOrderActionField()
                        {
                            ActionFlag = (char)ActionFlagType.Delete,
                            InstrumentID = ParkedOrderView[ComplexOrderGrid.SelectedIndex].InstrumentID,
                            //FrontID = ParkedOrderView[ComplexOrderGrid.SelectedIndex].FrontID,
                            //SessionID = ParkedOrderView[ComplexOrderGrid.SelectedIndex].SessionID,
                            //OrderRef = ParkedOrderView[ComplexOrderGrid.SelectedIndex].OrderRef,
                            ExchangeID = Utility.GetExchangeID(ParkedOrderView[ComplexOrderGrid.SelectedIndex].ExchangeName),
                            OrderSysID = ParkedOrderView[ComplexOrderGrid.SelectedIndex].OrderSysID
                        };
                        T.ReqOrderAction(inputOrderAction.ExchangeID, inputOrderAction.OrderSysID);
                        Thread.Sleep(1000);
                    }
                }
                else//预埋单
                {
                    //服务器预埋单（如何区分？）
                }
            }
            else
            {
                ShowMsg("未选中欲删除的预埋/条件单");
            }
        }
        //立即发出
        private void condImeSendBtn_Click(object sender, RoutedEventArgs e)
        {
            //1.对于手动发出的预埋单，进行下单处理
            //2.对于已经
            if (ComplexOrderGrid.SelectedIndex >= 0)
            {

            }
            else
            {
                ShowMsg("未选中需要立即发出的预埋单");
            }
        }

        //清空已发送
        private void condClearSendBtn_Click(object sender, RoutedEventArgs e)
        {
            //对于已经触发的条件单或者已经发送的预埋单，进行移除操作
            //int itemIndex = -1;
            //foreach (var item in ParkedOrderView)
            //{
            //    if (item.StopPrice != 0 && item.OrderStatus == OrderStatusType.Touched)
            //    {
            //        itemIndex = ParkedOrderView.ToList().FindIndex(x => x.FrontID == item.FrontID && x.SessionID == item.SessionID && x.OrderRef.Trim() == item.OrderRef.Trim());
            //        if (itemIndex >= 0)
            //        {
            //            ParkedOrderView.RemoveAt(itemIndex);
            //        }
            //    }

            //    else if (item.StopPrice == 0 && item.OrderStatus == ParkedOrderStatusType.Send)
            //    {
            //        itemIndex = ParkedOrderView.ToList().FindIndex(x => x.FrontID == item.FrontID && x.SessionID == item.SessionID && x.OrderRef.Trim() == item.OrderRef.Trim());
            //        if (itemIndex >= 0)
            //        {
            //            ParkedOrderView.RemoveAt(itemIndex);
            //        }
            //    }
            //}
        }

        #endregion


        private void miInstructions_Click(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("trigger the help command");
        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {
            switch (e.Key)
            {

                case Key.F1://报价表
                    tabOfferingList.IsSelected = true;
                    break;
                case Key.F2://合约列表
                    tabInstrumentList.IsSelected = true;
                    break;
                //case Key.F3://持仓记录
                //    tabNormal.IsSelected = true;
                //    //RdBtnPst.IsChecked = true;
                //    break;
                case Key.F4://成交记录
                    tabTradeRecord.IsSelected = true;
                    RdBtnDtl.IsChecked = true;
                    break;
                case Key.F5://未成交单
                    tabUnsettledOrder.IsSelected = true;
                    break;
                case Key.F6://所有委托单
                    tabAllOrder.IsSelected = true;
                    break;
                case Key.F9://预埋条件单
                    tabParkedOrder.IsSelected = true;
                    break;
                case Key.F8://撤单错单
                    tabCanceledOrders.IsSelected = true;
                    break;
                case Key.F7://已成交单
                    tabSettledOrder.IsSelected = true;
                    RdBtnDtl.IsChecked = true;
                    break;
                case Key.Home://标准下单板
                    tabStardOrderBoard.IsSelected = true;
                    break;
            }
        }
        #region 选项 系统菜单

        //保存配置到文件
        private void miSaveConfiguration_Click(object sender, RoutedEventArgs e)
        {

        }
        //加载配置文件
        private void miLoadConfiguration_Click(object sender, RoutedEventArgs e)
        {

        }

        private void miDefaultQuant_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.DefaultQuant);
        }

        private void MultipleSetup_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Q.isModifyCustInst = true;
                MultipleSettingsWindow settingsWin = new MultipleSettingsWindow(SettingsType.SettingInstrumentGroup, this);
                settingsWin.Show();
                Q.isModifyCustInst = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally { Q.isModifyCustInst = false; }
        }

        private void OptionSettings_Click(object sender, RoutedEventArgs e)
        {
            SetDataGridColumn(SettingsType.SettingInstrumentGroup);
        }
        #endregion

        #region 帮助 系统菜单

        private void miErrorReport_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ErrorReportWindow errReportWin = new ErrorReportWindow();
                errReportWin.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void AboutTQ_Click(object sender, RoutedEventArgs e)
        {
            AboutTickQuant abouttq = new AboutTickQuant();
            abouttq.Show();
        }

        #endregion

        #region 资金账户操作

        private void btnRefreshAccount_Click(object sender, RoutedEventArgs e)
        {
            T.ReqQryAccount();
        }

        private void btnQryAccount_Click(object sender, RoutedEventArgs e)
        {
<<<<<<< .mine
        //    int i = 0;
        //    //T.ReqQryBrokerTradingParams(new QryBrokerTradingParamsField() { BrokerID = Trader.DefaultBrokerID, InvestorID = Trader.Configuration.Investor.ID, CurrencyID = "CNY" });
        //    //T.ReqQryBrokerTradingAlgos(new QryBrokerTradingAlgosField() { BrokerID = Trader.DefaultBrokerID, ExchangeID = "SHFE", InstrumentID = "rb1610" });
        //    Strategy str = new Strategy("rb套利");
        //    //stStrategyInfo stInfo = new stStrategyInfo()
        //    //{
        //    //    cInstrument_type = '1',
        //    //    Description = "螺纹套利策略",
        //    //    strInstrument_id = "rb1610",
        //    //    listInstrument_id = new List<string>() { "rb1610" },
        //    //    StrategyType = StrategyType.主策略,
        //    //    StrategyName = "rb套利",
        //    //    listCondition = new List<Condition>()
        //    //           {
        //    //                new Condition()
        //    //                {
        //    //                    conditionLogics = ConditionLogicsType.并且, conditionType= ConditionType.本机价格条件,
        //    //                    priceStruct = new PriceStruct()
        //    //                    {
        //    //                        cInstrumentType ='1', contingentCondition= TQContingentConditionType.大于, InstrumentID="rb1610", priceType= PriceType.最新价, TrigerPrice=2280
        //    //                    }
        //    //                }
        //    //           },
        //    //    listOrder = new List<stOrder>()
        //    //    {
        //    //        new stOrder()
        //    //        {
        //    //             cHedge_flag= HedgeType.投机,
        //    //              cLimit_type='3',
        //    //            cOpen_direction = TradeDirection.空,
        //    //                cOrder_type= LimitMarket.限价,
        //    //                 dLimit_value=2305,
        //    //                  iVolume_total=4,
        //    //                   strExchangeId="SHFE",
        //    //                    strInstrument_id="rb1610"
        //    //        },
        //    //        new stOrder()
        //    //        {
        //    //             cHedge_flag= HedgeType.投机,
        //    //              cLimit_type='3',
        //    //               cOpen_direction= TradeDirection.多,
        //    //                cOrder_type= LimitMarket.限价,
        //    //                 dLimit_value=2280,
        //    //                  iVolume_total=8,
        //    //                   strExchangeId="SHFE",
        //    //                    strInstrument_id="rb1610"
        //    //        }
        //    //    }
        //    //};
        //    //stStrategyInfo closeStInfo = new stStrategyInfo()
        //    //{
        //    //    cInstrument_type = '1',
        //    //    Description = "螺纹套利平仓策略",
        //    //    strInstrument_id = "rb1610",
        //    //    listInstrument_id=new List<string>() { "rb1610"},
        //    //    StrategyType = StrategyType.平仓策略,
        //    //    StrategyName = "RB套利平仓策略",
        //    //    listCondition = new List<Condition>()
        //    //           {
        //    //                new Condition()
        //    //                {
        //    //                    conditionLogics = ConditionLogicsType.并且, conditionType= ConditionType.本机价格条件,
        //    //                    priceStruct = new PriceStruct()
        //    //                    {
        //    //                        cInstrumentType ='1', contingentCondition= TQContingentConditionType.大于, InstrumentID="rb1610", priceType= PriceType.最新价, TrigerPrice=2285
        //    //                    }
        //    //                }
        //    //           },
        //    //    listOrder = new List<stOrder>()
        //    //    {
        //    //        new stOrder()
        //    //        {
        //    //             cHedge_flag= HedgeType.投机,
        //    //              cLimit_type='3',
        //    //               cOpen_direction= TradeDirection.多,
        //    //                cOrder_type= LimitMarket.限价,
        //    //                 dLimit_value=2289,
        //    //                  iVolume_total=4,
        //    //                   strExchangeId="SHFE",
        //    //                    strInstrument_id="rb1610"
        //    //        }
        //    //    }
        //    //};

        //    Strategy strClose = new Strategy("RB套利平仓策略");
        //    strClose._upObj = str;
        //    //strClose.Init(closeStInfo);
        //    str.CloseStrategy = strClose;
        //    //stInfo.close_StrategyName = strClose.StrategyName;
        //    //str.Init(stInfo);
        //    ocStrategy.Add(str);

        //    ocStrategy.Add(strClose);

        //    str.Start();

=======
            int i = 0;
            //T.ReqQryBrokerTradingParams(new QryBrokerTradingParamsField() { BrokerID = Trader.DefaultBrokerID, InvestorID = Trader.Configuration.Investor.ID, CurrencyID = "CNY" });
            //T.ReqQryBrokerTradingAlgos(new QryBrokerTradingAlgosField() { BrokerID = Trader.DefaultBrokerID, ExchangeID = "SHFE", InstrumentID = "rb1610" });
            
>>>>>>> .r204
        }
        #endregion
        #region 窗体私有函数
        public void InitTraderByConfig()
        {
            #region open configuration.xml and init Trader's Config

            if (Trader.Configuration.InstrumentGroupList != null && Trader.Configuration.InstrumentGroupList.Count > 0)
            {
                //生成字典形态的合约组的组dicInstrumentIDsGroup 和 当前合约组合约列表Trader.CurrInstrumentList
                foreach (var v in Trader.Configuration.InstrumentGroupList)
                    dicInstrumentIDsGroup.TryAdd(v.Name, v);
                foreach (var v in dicInstrumentIDsGroup[Trader.Configuration.DefaultInstrumentIDGroup].InstrumentDataList)
                    //foreach (var v in Trader.CurrInstrumentList)
                {
                    Trader.AddCurrInstrumentList(v.InstrumentID);
                }
                //生成Q.SubscribedInstrumentIDs
                Combo cust;
                MarketData md;
                foreach (var v in Trader.CurrInstrumentList)
                {
                    if (v.Length < 10)   //基本合约
                    {
                        if (!Q.SubscribedInstrumentIDs.Contains(v)) Q.SubscribedInstrumentIDs.Add(v);
                        md = new MarketData(v) { PriceTick = Utility.GetPriceTick(v), IsCombo = false, ExchangeID = Utility.GetExchangeID(v) };

                        dicMarketData.AddOrUpdate(v, md, (k, s) => md);
                    }
                }
                InitCustomProductList();

                foreach (var v in Trader.CurrInstrumentList)   //自定义合约
                {
                    if (v.Length > 10)
                    {
                        if (!dicAllCustomProductList.TryGetValue(v, out cust))  //dicCustomProduct此时应该已经初始化
                        {
                            cust = new Combo(v) { IsCombo = true };
                        }

                        dicCustomProduct.TryAdd(cust.instrumentID, cust);
                        for (int i = 0; i < cust.ItemList.Count; i++)   //增加自定义合约中未包含的基本合约
                        {
                            if (!Q.SubscribedInstrumentIDs.Contains(cust.ItemList[i].InstrumentID))
                            {
                                Q.SubscribedInstrumentIDs.Add(cust.ItemList[i].InstrumentID);
                                md = new MarketData(cust.ItemList[i].InstrumentID) { PriceTick = Utility.GetPriceTick(cust.ItemList[i].InstrumentID), IsCombo = false, ExchangeID = Utility.GetExchangeID(cust.ItemList[i].InstrumentID) };
                                dicMarketData.TryAdd(cust.ItemList[i].InstrumentID, md);
                            }
                            else
                            {
                                dicMarketData.TryGetValue(cust.ItemList[i].InstrumentID, out md);
                            }
                            cust.ItemList[i].MarketData = md;   //对其中的MarketData赋值
                        }
                        dicMarketData.TryAdd(v, cust);
                    }
                }
            }
            for (int i = 0; i < Trader.CurrInstrumentList.Count; i++)
            {
                MarketDataView.Add(dicMarketData[Trader.CurrInstrumentList[i]]);
            }
            //此时Q.SubscribedInstrumentIDs已经初始化了，但是不包括持仓中的

            Trader.DefaultInstrumentQuant = new Dictionary<string, DefaultQuantSet>();
            //初始化合约默认交易数量列表
            if (Trader.Configuration.DefaultQuantSettings != null && Trader.Configuration.DefaultQuantSettings.Count > 0)
            {
                foreach (var v in Trader.Configuration.DefaultQuantSettings)
                    Trader.DefaultInstrumentQuant.Add(v.InstrumentID, v);
            }
            if (Trader.Configuration.ProductList != null && Trader.Configuration.ProductList.Count > 0)
            {
                foreach (var item in Trader.Configuration.ProductList)
                {
                    dicProductIDName.Add(item.ProductID, item.ProductName);
                }
            }
            #endregion
        }

        private void initOrderBoard()
        {
            //if (Trader.InstrumentIDList.Count > 0)
            //{
            //    orderboard.InstrumentID = Trader.InstrumentIDList[0];
            //}
            //string productID = Utility.GetProductID(orderboard.InstrumentID);
            //orderboard.Quant = Trader.Configuration.GetDefaultQuant(orderboard.InstrumentID, productID);
            //orderboard.orderMode = OrderMode.Auto;
            //orderboard.HedgeType = HedgeType.投机;
            //orderboard.OrderType = OrderType.Limit;
            //orderboard.OrderPrice = 0;
            //orderboard.GoodTill = DateTime.Now.AddDays(1);
            ////orderboard.ExchangeID = "上期所";
            //orderboard.quantMode = QuantMode.Default;


            //if (tglbtnPriceMode.IsChecked == true)
            //{
            //    orderboard.priceMode = PriceMode.Ownside;
            //}
            //else if (tglbtnPriceMode.IsChecked == false)
            //{
            //    orderboard.priceMode = PriceMode.PreSet;
            //}
            //else
            //{
            //    orderboard.priceMode = PriceMode.Opposite;
            //}
        }
        /// <summary>
        /// 保存账户目录下的用户配置和扩展配置信息
        /// </summary>
        private void SaveConfiguration()
        {
            try
            {
                if (Trader.Configuration != null)
                {
                    Trader.Configuration.Save();
                }
                if (Trader.ExtConfig != null)
                {
                    Trader.ExtConfig.ConditionalOrderNo = Trader.CustProductOrderNo - 1;
                    Trader.ExtConfig.Save();
                }
                //交易配置信息
                InstrumentInfoConfiguration instCfg = new InstrumentInfoConfiguration();
                instCfg.Instruments.AddRange(dicInstrumentData.Values);
                if (T != null)
                {
                    instCfg.CommissionRates.AddRange(T.dicCommissionRate.Values);
                    instCfg.MarginRates.AddRange(T.dicMarginRate.Values);
                }
                TQXmlHelper.XmlSerializeToFile(instCfg, Trader.InstrumentInfoCfgFile, Encoding.UTF8);
                //保存LogicPosition数据
                var logicPosList = dicLogicPositions.Values.ToList();
                LogicPositionRecords logicPosiRecords = new LogicPositionRecords(Trader.Configuration.TradingDay, logicPosList, LogicOrderMappingList);
                logicPosiRecords.Save(Trader.LogicPosiFile);

            }
            catch (Exception ex)
            {
                Utility.WriteLogFile(ex.ToString());
            }
        }
        /// <summary>
        /// 设置DataGrid需要显示的列
        /// </summary>
        /// <param name="settingsType"></param>
        private void SetDataGridColumn(SettingsType settingsType)
        {
            try
            {
                MultipleSettingsWindow settingsWin = new MultipleSettingsWindow(settingsType, this);
                settingsWin.Show();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// 切换或者更新管理自选合约组
        /// </summary>
        /// <param name="groupName"></param>
        public void SwitchOrUpdateInstrumentIDsGroup(string groupName)//, TQConcurrentDictionary<string, InstrumentData> dicTQInstru)
        {
            //首先设置标志位，不再接收行情推送
            //再退订当前合约组的行情
            //清空 行情的View
            //订阅所选合约组的行情

            //TQConcurrentDictionary<string, InstrumentData> dicInstru= new TQConcurrentDictionary<string, InstrumentData>();


            InstrumentGroup thisInstrumentgroup = Trader.Configuration.InstrumentGroupList.Find(x => x.Name == groupName);
            if (thisInstrumentgroup == null)
            {
                Utility.WriteMemLog(MemLog, "error on finding InstrumentGroup: " + groupName);
            }
            else
            {
                //总结一下：Trader.Configuration.InstrumentGroupList, 自定义合约组列表（含自定义品种）
                //Trader.InstrumentIDList, 保留的当前合约组合约列表，可以合并入Trader.Configuration.InstrumentGroupList
                //Q.SubscibedInstrumentIDs，保存当前订阅的合约列表（基本合约，自定义品种拆分为基本合约）
                //根据合约组InstrumentDataList合约信息列表（List<InstrumentData>, 含自定义品种)生成当前需要订阅合约列表字典（基础合约列表）

                Trader.Configuration.DefaultInstrumentIDGroup = groupName;
                Q.ReqUnSubscribeMarketData(Q.SubscribedInstrumentIDs);
                Q.SubscribedInstrumentIDs.Clear();

                dicMarketData.Clear();
                MarketDataView.Clear();
                dicCustomProduct.Clear();

                foreach (var v in thisInstrumentgroup.InstrumentDataList)
                {
                    if (!Q.SubscribedInstrumentIDs.Contains(v.InstrumentID))
                        Q.SubscribedInstrumentIDs.Add(v.InstrumentID);

                    if (v.InstrumentID.Length <= 10)
                    {
                        MarketData md = new MarketData(v.InstrumentID) { IsCombo = false };
                        dicMarketData.TryAdd(v.InstrumentID, md);
                    }
                }
                Trader.CurrInstrumentList = Q.SubscribedInstrumentIDs;     //产生当前自定义合约组合约列表（含自定义品种，未拆分，未包含当前持仓合约）
                if (dicPositionSummary.Count > 0)   //包含持仓中的合约
                {
                    foreach (var item in dicPositionSummary.Values)
                    {
                        if (item == null || item.Position == 0)
                        {
                            continue;
                        }
                        if (!Q.SubscribedInstrumentIDs.Contains(item.InstrumentID))
                        {
                            Q.SubscribedInstrumentIDs.Add(item.InstrumentID);
                        }

                        dicMarketData.TryAdd(item.InstrumentID, new MarketData(item.InstrumentID) { IsCombo = false });
                    }
                }
                //生成阶段性Q.SubscribeInstrumentIDs,下一步需要拆分自定义品种
                Combo cust;
                for (int i =  Q.SubscribedInstrumentIDs.Count-1;i>=0; i--)
                {
                    if (Q.SubscribedInstrumentIDs[i].Length <10)   //基本合约
                    {
                        continue;
                    }
                    else     //customproduct
                    {
                        if (!dicAllCustomProductList.TryGetValue(Q.SubscribedInstrumentIDs[i], out cust))  //异常情况，通常应该在里面了
                        {
                            cust = new Combo(Q.SubscribedInstrumentIDs[i]) { IsCombo = true };

                            dicAllCustomProductList.TryAdd(Q.SubscribedInstrumentIDs[i], cust);
                        }
                        foreach (var v in cust.ItemList)
                        {
                            if (!Q.SubscribedInstrumentIDs.Contains(v.InstrumentID))   //组合里的合约没在订阅合约中
                            {
                                Q.SubscribedInstrumentIDs.Add(v.InstrumentID);
                                dicMarketData.TryAdd(v.InstrumentID, new MarketData(v.InstrumentID) { IsCombo = false, ExchangeID = Utility.GetExchangeID(v.InstrumentID) });
                            }
                        }
                        //for (int ii = 0; ii < cust.ItemList.Count; ii++)
                        //cust.ItemList[ii].MarketData = dicMarketData[cust.ItemList[ii].InstrumentID];
                        foreach (var m in cust.ItemList)
                        {
                            if (m.MarketData == null) m.MarketData = dicMarketData[m.InstrumentID];
                        }
                        dicMarketData.TryAdd(Q.SubscribedInstrumentIDs[i], cust);
                        dicCustomProduct.TryAdd(cust.instrumentID, cust);
                        //MarketDataView.Add(cust);
                        Q.SubscribedInstrumentIDs.RemoveAt(i);

                    }
                }
                for (int i = 0; i < thisInstrumentgroup.InstrumentDataList.Count; i++)
                    MarketDataView.Add(dicMarketData[thisInstrumentgroup.InstrumentDataList[i].InstrumentID]);

                if (thisInstrumentgroup.InstrumentDataList.Count > 0)
                    MarketDataGrid.SelectedIndex = 0;
                //InitMarketDataSerial();
                Q.ReqSubscribeMarketData(Q.SubscribedInstrumentIDs);
                QryInstrumentCommissionRate(Q.SubscribedInstrumentIDs);
                QryInstrumentMarginRate(Q.SubscribedInstrumentIDs);
            }

            Q.isModifyCustInst = false;
        }

        /// <summary>
        /// 订阅合约行情Q.SubscribedInstrumentIDs, 要订阅的所有合约，包括持仓合约
        /// dicMarketData,包括订阅的所有合约和自定义品种
        /// MarketDataView，当前合约组中的所有合约，包括自定义品种和当前持仓的合约（如果不在自选组的话）
        /// 处理Trader.InstrumentList,dicCustomProduct,dicMarketData,MarketDataView
        /// </summary>
        /// <param name="instrumentIDs">需要订阅行情的合约代码</param>
        public void InitMarketDataSerial()
        {
            Combo cust;
            MarketData MD;
            dicMarketData.Clear();
            MarketDataView.Clear();
            dicCustomProduct.Clear();
            int index = Trader.Configuration.InstrumentGroupList.FindIndex
                (x => x.Name == Trader.Configuration.DefaultInstrumentIDGroup);
            var l = Trader.Configuration.InstrumentGroupList[index].InstrumentDataList;
            foreach (var v in Q.SubscribedInstrumentIDs)
                dicMarketData.TryAdd(v, new MarketData(v) { IsCombo = false });
            foreach (var v in l)
            {
                if (v.InstrumentID.Length > 10)
                {
                    if (!dicCustomProduct.TryGetValue(v.InstrumentID, out cust))    //unexpected situation
                    {
                        cust = new Combo(v.InstrumentID, v.InstrumentName, v.PriceTick) { IsCombo = true };
                        dicCustomProduct.TryAdd(cust.instrumentID, cust);
                    }
                    dicMarketData.TryAdd(v.InstrumentID, cust);
                }
            }
            foreach (var v in l)
                MarketDataView.Add(dicMarketData[v.InstrumentID]);

        }
        //对价平仓
        private void ClosePositionWithOppositePrice(PositionDataSummary posSum)
        {
            TradeDirection dir = (posSum.Direction == PosiDirection.空) ? TradeDirection.多 : TradeDirection.空;
            var orderboard = dicMarketData[posSum.InstrumentID];
            orderboard.OrderBoardOrderMode = OrderMode.Close;
            orderboard.OrderBoardPricingMode = PricingMode.Opposite;
            orderboard.OrderBoardHedgeType = HedgeType.投机;//need to do
            orderboard.exchangeID = Utility.GetExchangeID(posSum.ExchangeName);
            ViewModel.CurrentMarketData = orderboard;
            int preSelectedIndex = MarketDataGrid.SelectedIndex;
            int itemIndex = MarketDataView.ToList().FindIndex(x => x.instrumentID == orderboard.instrumentID);
            if (itemIndex < 0)
            {
                MarketDataView.Add(orderboard);
            }
            else
            {
                MarketDataGrid.SelectedIndex = itemIndex;
            }

            T.ReqClosePosition(orderboard, dir);
            //需要跟下单板数据联动, 在持仓不在合约组的情况下，要临时添加在当前合约组里
            //T.ReqClosePosition(ViewModel.CurrentMarketData, posSum.Direction == DirectionType.多 ? TradeDirection.空 : TradeDirection.多, 0);
            if (itemIndex < 0)
            {
                MarketDataView.Remove(orderboard);
            }
            else
            {
                MarketDataGrid.SelectedIndex = preSelectedIndex;
            }

            #region old method
            //bool isSHFE = (posSum.ExchangeName == "上期所") ? true : false;
            //MarketData md;
            //if (!dicMarketData.TryGetValue(posSum.InstrumentID, out md))
            //{
            //    MessageBox.Show("该合约没有订阅行情，请订阅行情后再进行对价平仓");
            //    return;
            //}
            //DirectionType direction;
            //double price;
            //if (posSum.Direction == DirectionType.空)
            //{
            //    direction = DirectionType.多;
            //    price = md.BidPrice1;
            //}
            //else
            //{
            //    direction = DirectionType.空;
            //    price = md.AskPrice1;
            //}

            ////如有挂单，先撤单,再行平仓
            //var unsettledOrders = GetUnsettledCloseOrders(posSum.InstrumentID, direction);
            //if (unsettledOrders != null && unsettledOrders.Count > 0)
            //{
            //    Task.Run(() =>
            //    {
            //        int num = 0;
            //        foreach (var order in unsettledOrders)
            //        {
            //            //撤单
            //            num++;
            //            T.ReqOrderAction(order.FrontID, order.SessionID, order.OrderRef, order.InstrumentID);
            //        }
            //        string key = posSum.InstrumentID + direction.ToString();
            //        dicUnsettledCloseOrderNum.AddOrUpdate(key, num, (k, v) => num);
            //        while (true)
            //        {
            //            num = -1;
            //            if (!dicUnsettledCloseOrderNum.TryGetValue(key, out num))
            //            {
            //                if (isSHFE)
            //                {
            //                    if (posSum.YdPosition > 0)
            //                    {
            //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平昨, price, posSum.YdPosition, LimitMarketFakFok.Limit);
            //                    }
            //                    if (posSum.TodayPosition > 0)
            //                    {
            //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平今, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
            //                    }
            //                }
            //                else
            //                {
            //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.Position, LimitMarketFakFok.Limit);
            //                }
            //                return;
            //            }
            //            Thread.Sleep(1000);
            //        }
            //    });
            //}
            //else
            //{
            //    if (isSHFE)
            //    {
            //        if (posSum.YdPosition > 0)
            //        {
            //            T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平昨, price, posSum.YdPosition, LimitMarketFakFok.Limit);
            //        }
            //        if (posSum.TodayPosition > 0)
            //        {
            //            T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平今, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
            //        }
            //    }
            //    else
            //    {
            //        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.Position, LimitMarketFakFok.Limit);
            //    }
            //}
            #endregion

        }
        //市价平仓
        private void ClosePositionWithMarketPrice(PositionDataSummary posSum)
        {
            TradeDirection dir = (posSum.Direction == PosiDirection.空) ? TradeDirection.多 : TradeDirection.空;
            var orderboard = dicMarketData[posSum.InstrumentID];
            orderboard.OrderBoardPricingMode = PricingMode.Market;
            orderboard.OrderBoardOrderMode = OrderMode.Close;
            orderboard.OrderBoardHedgeType = HedgeType.投机;//need to do
            orderboard.exchangeID = Utility.GetExchangeID(posSum.ExchangeName);
            int preSelectedIndex = MarketDataGrid.SelectedIndex;
            int itemIndex = MarketDataView.ToList().FindIndex(x => x.instrumentID == orderboard.instrumentID);
            if (itemIndex < 0)
            {
                MarketDataView.Add(orderboard);
            }
            else
            {
                MarketDataGrid.SelectedIndex = itemIndex;
            }

            T.ReqClosePosition(orderboard, dir);
            if (itemIndex < 0)
            {
                MarketDataView.Remove(orderboard);
            }
            else
            {
                MarketDataGrid.SelectedIndex = preSelectedIndex;
            }
            #region old method

            //bool isSHFE = (posSum.ExchangeName == "上期所") ? true : false;

            //MarketData md;
            //if (!dicMarketData.TryGetValue(posSum.InstrumentID, out md))
            //{
            //    if (isSHFE)
            //    {
            //        MessageBox.Show("该合约没有订阅行情，请订阅行情后再进行市价平仓");
            //        return;
            //    }
            //}
            //double price;
            //DirectionType direction;

            //if (posSum.Direction == DirectionType.空)
            //{
            //    direction = DirectionType.多;
            //    price = isSHFE ? md.UpperLimitPrice : 0;
            //}
            //else
            //{
            //    direction = DirectionType.空;
            //    price = isSHFE ? md.LowerLimitPrice : 0;
            //}
            //如有挂单，先撤单,再行平仓
            //var unsettledOrders = GetUnsettledCloseOrders(posSum.InstrumentID, direction);
            //if (unsettledOrders != null && unsettledOrders.Count > 0)
            //{
            //    Task.Run(() =>
            //    {
            //        int num = 0;
            //        foreach (var order in unsettledOrders)
            //        {
            //            //撤单
            //            num++;
            //            T.ReqOrderAction(order.FrontID, order.SessionID, order.OrderRef, order.InstrumentID);
            //        }
            //        string key = posSum.InstrumentID + direction.ToString();
            //        T.dicUnsettledCloseOrderNum.AddOrUpdate(key, num, (k, v) => num);
            //        while (true)
            //        {
            //            num = -1;
            //            if (!T.dicUnsettledCloseOrderNum.TryGetValue(key, out num))
            //            {
            //                if (isSHFE)
            //                {
            //                    if (posSum.YdPosition > 0)
            //                    {
            //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平昨, price, posSum.YdPosition, LimitMarketFakFok.Limit);
            //                    }
            //                    if (posSum.TodayPosition > 0)
            //                    {
            //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平今, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
            //                    }
            //                }
            //                else
            //                {
            //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.Position, LimitMarketFakFok.Limit);

            //                }
            //                return;
            //            }
            //            Thread.Sleep(1000);
            //        }
            //    });
            //}
            //else
            //{
            //    if (isSHFE)
            //    {
            //        if (posSum.YdPosition > 0)
            //        {
            //            T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平昨, price, posSum.YdPosition, LimitMarketFakFok.Limit);
            //        }
            //        if (posSum.TodayPosition > 0)
            //        {
            //            T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平今, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
            //        }
            //    }
            //    else
            //    {
            //        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机);
            //    }
            //}
            #endregion
        }
        //市价反手
        //private void ReversePositionMarketPrice(PositionDataSummary posSum)
        //{
        //    //1.先对当前持仓汇总平仓
        //    TradeDirection dir = (posSum.Direction == DirectionType.空) ? TradeDirection.多 : TradeDirection.空;
        //    var orderboard = dicMarketData[posSum.InstrumentID];
        //    orderboard.OrderBoardPricingMode = PricingMode.Market;
        //    orderboard.OrderBoardOrderMode = OrderMode.Close;
        //    orderboard.OrderBoardPriceMode = PriceMode.PreSet;
        //    orderboard.OrderBoardHedgeType = HedgeType.投机;//need to do
        //    orderboard.exchangeID = Utility.GetExchangeID(posSum.ExchangeName);
        //    T.ReqClosePosition(orderboard, dir);
        //    //2.再开反向仓
        //    orderboard.OrderBoardPricingMode = PricingMode.Market;
        //    orderboard.OrderBoardOrderMode = OrderMode.Open;
        //    orderboard.OrderBoardPriceMode = PriceMode.PreSet;
        //    orderboard.OrderBoardHedgeType = HedgeType.投机;//need to do
        //    orderboard.exchangeID = Utility.GetExchangeID(posSum.ExchangeName);
        //    T.ReqOrderInsert(orderboard, dir, posSum.Position);

        //    #region old method
        //    //bool isSHFE = (posSum.ExchangeName == "上期所") ? true : false;
        //    //MarketData md;
        //    //if (!dicMarketData.TryGetValue(posSum.InstrumentID, out md))
        //    //{
        //    //    if (isSHFE)
        //    //    {
        //    //        MessageBox.Show("该合约没有订阅行情，请订阅行情后再进行市价反手");
        //    //        return;
        //    //    }
        //    //}
        //    //DirectionType direction;
        //    //double price;
        //    //if (posSum.Direction == DirectionType.空)
        //    //{
        //    //    direction = DirectionType.多;
        //    //    price = isSHFE ? md.UpperLimitPrice : 0;
        //    //}
        //    //else
        //    //{
        //    //    direction = DirectionType.空;
        //    //    price = isSHFE ? md.LowerLimitPrice : 0;
        //    //}
        //    ////如有挂单，先撤单,再行反手
        //    //var unsettledOrders = GetUnsettledCloseOrders(posSum.InstrumentID, direction);
        //    //if (unsettledOrders != null && unsettledOrders.Count > 0)
        //    //{
        //    //    Task.Run(() =>
        //    //    {
        //    //        //先撤单
        //    //        int num = 0;
        //    //        foreach (var order in unsettledOrders)
        //    //        {
        //    //            num++;
        //    //            T.ReqOrderAction(order.FrontID, order.SessionID, order.OrderRef, order.InstrumentID);
        //    //        }
        //    //        string key = posSum.InstrumentID + direction.ToString();
        //    //        T.dicUnsettledCloseOrderNum.AddOrUpdate(key, num, (k, v) => num);
        //    //        while (true)
        //    //        {
        //    //            num = -1;
        //    //            if (!T.dicUnsettledCloseOrderNum.TryGetValue(key, out num))
        //    //            {
        //    //                //撤单成功后，再进行平仓操作
        //    //                if (isSHFE)
        //    //                {
        //    //                    if (posSum.YdPosition > 0)
        //    //                    {
        //    //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平昨, price, posSum.YdPosition, LimitMarketFakFok.Limit);

        //    //                        T.ReqClosePosition(dicMarketData[posSum.InstrumentID], direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, posSum.YdPosition);
        //    //                    }
        //    //                    if (posSum.TodayPosition > 0)
        //    //                    {
        //    //                        T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平今, price, posSum.TodayPosition, LimitMarketFakFok.Limit);

        //    //                        T.ReqClosePosition(dicMarketData[posSum.InstrumentID], direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, posSum.TodayPosition);

        //    //                    }
        //    //                }
        //    //                else
        //    //                {
        //    //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, price, posSum.Position, LimitMarketFakFok.Limit);
        //    //                }
        //    //            }
        //    //            Thread.Sleep(1000);
        //    //        }
        //    //        while (true)
        //    //        {
        //    //            //平仓成功后，最后进行反向开仓操作 //todo:huangrongyu
        //    //            if (true)
        //    //            {
        //    //                if (isSHFE)
        //    //                {
        //    //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, price, posSum.Position, LimitMarketFakFok.Limit);
        //    //                }
        //    //                else
        //    //                {
        //    //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机);
        //    //                }
        //    //            }
        //    //            Thread.Sleep(1000);
        //    //        }
        //    //    });
        //    //}
        //    //else
        //    //{
        //    //    Task.Run(() =>
        //    //    {
        //    //        if (isSHFE)
        //    //        {
        //    //            if (posSum.YdPosition > 0)
        //    //            {
        //    //                T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平昨, price, posSum.YdPosition, LimitMarketFakFok.Limit);
        //    //            }
        //    //            if (posSum.TodayPosition > 0)
        //    //            {
        //    //                T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平今, price, posSum.TodayPosition, LimitMarketFakFok.Limit);
        //    //            }
        //    //        }
        //    //        else
        //    //        {
        //    //            T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.平仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机);
        //    //        }
        //    //        while (true)
        //    //        {
        //    //            //平仓成功后，最后进行反向开仓操作 //todo:huangrongyu
        //    //            if (true)
        //    //            {
        //    //                if (isSHFE)
        //    //                {
        //    //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, price, posSum.Position, LimitMarketFakFok.Limit);
        //    //                }
        //    //                else
        //    //                {
        //    //                    T.ReqOrderInsert(posSum.InstrumentID, direction == DirectionType.多 ? TradeDirection.多 : TradeDirection.空, OffsetType.开仓, 0, posSum.Position, LimitMarketFakFok.Market, HedgeType.投机);
        //    //                }
        //    //            }
        //    //            Thread.Sleep(1000);
        //    //        }
        //    //    });
        //    //}
        //    #endregion
        //}
            /// <summary>
            /// 获取未成交的平仓单列表
            /// </summary>
            /// <param name="instrumentID">合约ID</param>
            /// <param name="direction">平仓方向</param>
            /// <returns></returns>
        private List<OrderData> GetUnsettledCloseOrders(string instrumentID, PosiDirection direction)
        {
            List<OrderData> unsettledCloseOrders = new List<OrderData>();
            dicOrder.Values.ToList().FindAll(x => x.InstrumentID == instrumentID && x.Direction == direction &&
                (x.Offset == OffsetType.平仓 || x.Offset == OffsetType.平今 || x.Offset == OffsetType.平昨)
                && (x.OrderStatus == OrderStatusType.尚未触发 || x.OrderStatus == OrderStatusType.已触发 || x.OrderStatus == OrderStatusType.未知 || x.OrderStatus == OrderStatusType.未成交还在队列中)).ToList();
            if (unsettledCloseOrders == null)
            {
                unsettledCloseOrders = new List<OrderData>();
            }
            return unsettledCloseOrders;
        }

        //清仓
        private void ForceCloseAllPositions()
        {
            if (Trader.Configuration.ConfirmOrder == true)
            {
                MessageBoxResult mr = MessageBoxResult.None;

                Task t = Task.Run(new Action(() =>
                {
                    mr = MessageBox.Show("确认平掉所有持仓 ? ", "确认平仓", MessageBoxButton.YesNo);
                    if (mr == MessageBoxResult.Yes)
                    {
                        T.ReqForceClose(ViewModel.CurrentMarketData);                            }
                }));
            }
            else
            {
                T.ReqForceClose(ViewModel.CurrentMarketData);
            }
        }
        /// <summary>
        /// 撤单
        /// </summary>
        /// <param name="order"></param>
        private void DeleteUnsettledOrder(OrderData order )
        {
            InputOrderActionField inputOrderAction = new InputOrderActionField()
            {
                ActionFlag = (char)ActionFlagType.Delete,
                InstrumentID = order.InstrumentID,
                ExchangeID = Utility.GetExchangeID(order.ExchangeName),
                FrontID = order.FrontID,
                OrderRef = order.OrderRef,
                OrderSysID = order.OrderSysID,
                SessionID = order.SessionID,
            };
            if (Trader.Configuration.ConfirmOrder == true)
            {
                MessageBoxResult mr = MessageBoxResult.None;
                Task t = Task.Run(new Action(() =>
                {
                    mr = MessageBox.Show("确认撤消该笔未成交单 ? ", "确认撤单", MessageBoxButton.YesNo);
                    if (mr == MessageBoxResult.Yes)
                    {
                        Dispatcher.BeginInvoke(DispatcherPriority.Send, new Action(() => T.ReqOrderAction(inputOrderAction)));
                    }
                }));
            }
            else
                T.ReqOrderAction(inputOrderAction);
        }
        private void DeleteAllUnsettledOrder(List<OrderData> orders)
        {
            InputOrderActionField inputOrderAction = new InputOrderActionField();
            if (Trader.Configuration.ConfirmOrder == true)
            {
                MessageBoxResult mr = MessageBoxResult.None;

                Task t = Task.Run(new Action(() =>
                {
                    mr = MessageBox.Show("确认撤消所有未成交单 ? ", "确认撤单", MessageBoxButton.YesNo);
                    if (mr == MessageBoxResult.Yes)
                    {
                        foreach (OrderData order in orders)
                        {
                            inputOrderAction = new InputOrderActionField()
                            {
                                ActionFlag = (char)ActionFlagType.Delete,
                                InstrumentID = order.InstrumentID,
                                ExchangeID = Utility.GetExchangeID(order.ExchangeName),
                                FrontID = order.FrontID,
                                OrderRef = order.OrderRef,
                                OrderSysID = order.OrderSysID,
                                SessionID = order.SessionID,
                            };
                            T.ReqOrderAction(inputOrderAction);
                        }
                    }
                }));
            }
            else
                foreach (OrderData order in orders)
                {
                    inputOrderAction = new InputOrderActionField()
                    {
                        ActionFlag = (char)ActionFlagType.Delete,
                        InstrumentID = order.InstrumentID,
                        ExchangeID = Utility.GetExchangeID(order.ExchangeName),
                        FrontID = order.FrontID,
                        OrderRef = order.OrderRef,
                        OrderSysID = order.OrderSysID,
                        SessionID = order.SessionID,
                    };
                    T.ReqOrderAction(inputOrderAction);
                }
        }
        /// <summary>
        /// 根据合约和行情更新下单板
        /// </summary>
        /// <param name="m"></param>
        private void UpdateOrderBoard(MarketData m, bool UpdateOrderPrice=false)
        {
            //if(string.IsNullOrEmpty(m.InstrumentID)) return;
            //orderboard.InstrumentID = m.InstrumentID;

            //InstrumentData instru;
            //CustomProduct custProduct;
            //if (dicInstrumentData.TryGetValue(m.InstrumentID, out instru))
            //{
            //    orderboard.ExchangeID = instru.ExchangeID;
            //    orderboard.TradeName = instru.InstrumentName;
            //}
            //else if (dicCustomProduct.TryGetValue(m.InstrumentID, out custProduct))
            //{
            //    orderboard.ExchangeID = "CUSTOM";
            //    orderboard.TradeName = custProduct.InstrumentName;
            //}

            //orderboard.AskVolume1 = m.AskVolume1;
            //orderboard.BidVolume1 = m.BidVolume1;
            //orderboard.BidPrice1 = m.BidPrice1;
            //orderboard.AskPrice1 = m.AskPrice1;
            //orderboard.UpperLimitPrice = m.UpperLimitPrice;
            //orderboard.LowerLimitPrice = m.LowerLimitPrice;
            //switch (orderboard.priceMode)
            //{
            //    case PriceMode.Ownside:
            //    case PriceMode.Opposite:
            //        orderboard.OrderPrice = 0;
            //        break;
            //    case PriceMode.PreSet:
            //    default:
            //        if (orderboard.ScrollBarPriceRefresh)
            //                orderboard.OrderPrice = m.LastPrice;
            //        break;
            //}

            //string posKey = Trader.Configuration.Investor.ID + orderboard.InstrumentID;
            //switch (orderboard.quantMode)
            //{
            //    case (QuantMode.AllAvailable):
            //        {
            //            //setup the orderboard.Quant as inquiry all available quant of this instrument
            //            PositionDataSummary posi;
            //            orderboard.Quant = 0;
            //            if (dicPositionSummary.TryGetValue(posKey + DirectionType.多, out posi))
            //                orderboard.Quant = posi.Position;
            //            if (dicPositionSummary.TryGetValue(posKey + DirectionType.空, out posi))
            //                orderboard.Quant = posi.Position > orderboard.Quant ? posi.Position
            //                   : orderboard.Quant;
            //        }
            //        break;
            //    case (QuantMode.Preset):
            //        //orderboard.Quant = 1;
            //        break;
            //    case (QuantMode.Default):
            //        //default:
            //        orderboard.Quant = Trader.Configuration.GetDefaultQuant(orderboard.InstrumentID,(instru==null || string.IsNullOrEmpty(instru.InstrumentID))?string.Empty: instru.ProductID);
            //        break;
            //}
        }

        /// <summary>
        /// 初始化品种下拉框
        /// </summary>
        private void InitProductPopup()
        {
            List<string> productIds = new List<string> { "螺纹钢", "PTA", "黄金", "白银", "铝", "燃油", "橡胶", "白糖", "棉花" };
            productIds = dicInstrumentData.Values.Select(x => x.ProductID).Distinct().ToList();
            productIds.Sort();
            int columns = 3;
            double dRow = productIds.Count / columns;
            int rows = (int)Math.Ceiling(dRow);
            gridProduct.Children.Clear();
            gridProduct.RowDefinitions.Clear();
            gridProduct.ColumnDefinitions.Clear();
            for (int r = 0; r < rows; r++)
            {
                gridProduct.RowDefinitions.Add(new RowDefinition() );
            }
            for (int c = 0; c < columns; c++)
            {
                gridProduct.ColumnDefinitions.Add(new ColumnDefinition());
            }
            string productName = string.Empty;
            List<Button> buttons = new List<Button>();
            for (int r = 0; r < rows; r++)
            {
                for (int c = 0; c < columns; c++)
                {
                    buttons.Add(new Button());
                    if (dicProductIDName.TryGetValue(productIds[r * columns + c], out productName))
                    {
                        buttons[r * columns + c].Content = productName;
                    }
                    else
                    {
                        buttons[r * columns + c].Content = productIds[r * columns + c];
                    }
                    buttons[r * columns + c].Tag = productIds[r * columns + c];
                    buttons[r * columns + c].Width = 60;
                    buttons[r * columns + c].Height = 30;
                    buttons[r * columns + c].Margin = new Thickness(0, 1, 1, 1);
                    gridProduct.Children.Add(buttons[r * columns + c]);
                    buttons[r * columns + c].SetValue(Grid.RowProperty, r);
                    buttons[r * columns + c].SetValue(Grid.ColumnProperty, c);
                    buttons[r * columns + c].Click += new RoutedEventHandler(SelectProduct_Click);
                }
            }
        }

        /// <summary>
        /// 初始化合约下拉框
        /// </summary>
        /// <param name="productID"></param>
        private void InitInstrumentPopup(string productID)
        {
            List<string>  instrumentIds = dicInstrumentData.Values.Where(x => x.ProductID== productID).Select(x=>x.InstrumentID).ToList();
            instrumentIds.Sort();
            int columns = 1;
            double dRow = instrumentIds.Count / columns;
            int rows = (int)Math.Ceiling(dRow);
            gridInstrument.Children.Clear();
            gridInstrument.RowDefinitions.Clear();
            gridInstrument.ColumnDefinitions.Clear();
            for (int r = 0; r < rows; r++)
            {
                gridInstrument.RowDefinitions.Add(new RowDefinition() );
            }
            for (int c = 0; c < columns; c++)
            {
                gridInstrument.ColumnDefinitions.Add(new ColumnDefinition());
            }
            List<Button> buttons = new List<Button>();
            for (int r = 0; r < rows; r++)
            {
                for (int c = 0; c < columns; c++)
                {
                    buttons.Add(new Button());
                    buttons[r * columns + c].Content = instrumentIds[r * columns + c];
                    buttons[r * columns + c].Width = 60;
                    buttons[r * columns + c].Height = 30;
                    buttons[r * columns + c].Margin = new Thickness(0, 1, 0, 1);
                    gridInstrument.Children.Add(buttons[r * columns + c]);
                    buttons[r * columns + c].SetValue(Grid.RowProperty, r);
                    buttons[r * columns + c].SetValue(Grid.ColumnProperty, c);
                    buttons[r * columns + c].Click += new RoutedEventHandler(SelectInstrument_Click);
                }
            }
        }
        /// <summary>
        /// 在登录成功后，进行本地仓位的日结处理(每个交易日的第一次登录处理)
        /// TODO
        /// </summary>
        private void PositionProcess()
        {
            if (logicPosiRecords.TradingDay != Trader.Configuration.TradingDay)
            {
                //做日结
                Trader.CustProductOrderNo = 1;
                logicPosiRecords.TradingDay = Trader.Configuration.TradingDay;
                for (int i = 0; i < logicPosiRecords.Positions.Count; i++)
                {
                    LogicPosition logicPosi = logicPosiRecords.Positions[i];
                    if (logicPosi.Position == 0 || logicPosi.IsCombo == false)//过滤掉当前持仓为零的纪录或者非组合持仓
                    { continue; }
                    double preSettlementPrice = 0;
                    double margin = 0;
                    double positionCost = 0;
                    double tradeAmount;
                    int volume;
                    PosiDirection posiDirection;
                    string marginKey = string.Empty;
                    Combo combo;
                    if (dicCustomProduct.TryGetValue(logicPosi.InstrumentID, out combo))
                    {
                        combo.ItemList.ForEach(item =>
                        {
                            preSettlementPrice += item.Weight * dicMarketData[item.InstrumentID].preSettlementPrice;
                            posiDirection = item.Weight > 0 ? logicPosi.Direction : (logicPosi.Direction == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多);
                            tradeAmount = logicPosi.Position * dicMarketData[item.InstrumentID].preSettlementPrice * Math.Abs(item.Weight) * dicInstrumentData[item.InstrumentID].VolumeMultiple;
                            volume = logicPosi.Position * Math.Abs(item.Weight);
                            marginKey = item.InstrumentID + HedgeType.投机;
                            margin += Utility.GetMargin(tradeAmount, volume, posiDirection, T.dicMarginRate[marginKey]);
                            positionCost += tradeAmount;
                        });
                    }
                    //else
                    //{
                    //    preSettlementPrice = dicMarketData[logicPosi.InstrumentID].preSettlementPrice;
                    //    posiDirection = logicPosi.Direction;
                    //    tradeAmount = logicPosi.Position * dicMarketData[logicPosi.InstrumentID].preSettlementPrice * dicInstrumentData[logicPosi.InstrumentID].VolumeMultiple;
                    //    volume = logicPosi.Position;
                    //    marginKey = logicPosi.InstrumentID + HedgeType.投机;
                    //    margin += Utility.GetMargin(tradeAmount, volume, posiDirection, T.dicMarginRate[marginKey]);
                    //    positionCost += tradeAmount;
                    //}

                    logicPosi.YdPosition = logicPosi.Position;
                    logicPosi.YdOpenCost = logicPosi.OpenCost;

                    logicPosi.CashIn = 0;
                    logicPosi.CloseAmount = 0;
                    logicPosi.CloseProfit = 0;
                    logicPosi.CloseVolume = 0;
                    //logicPosi.Commission = 0;
                    logicPosi.FrozenCash = 0;
                    logicPosi.FrozenCommission = 0;
                    logicPosi.FrozenMargin = 0;
                    logicPosi.OpenAmount = 0;
                    logicPosi.OpenCost = 0;
                    logicPosi.OpenVolume = 0;
                    logicPosi.PositionProfit = 0;
                    logicPosi.PreMargin = margin;
                    logicPosi.PreSettlementPrice = preSettlementPrice;
                    logicPosi.SettlementPrice = 0;
                    logicPosi.TodayPosition = 0;
                    logicPosi.UseMargin = margin; //TODO:需要根据昨结价从新计算占用的保证金
                    logicPosi.PositionCost = positionCost;

                    string posKey = logicPosi.InvestorID + logicPosi.InstrumentID + logicPosi.Direction;
                    dicLogicPositions.TryAdd(posKey, logicPosi);
                    Dispatcher.Invoke(new Action(() => LogicPositionView.Add(logicPosi)));
                    //剔除组成 组合逻辑持仓中的单腿合约昨仓
                    combo.ItemList.ForEach((item) =>
                    {
                        int instVolume = logicPosi.Position * Math.Abs(item.Weight);
                        string posiKey = logicPosi.InvestorID + item.InstrumentID + (item.Weight > 0 ? logicPosi.Direction : logicPosi.Direction == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多);
                        LogicPosition posi;
                        if (dicLogicPositions.TryGetValue(posiKey, out posi))
                        {
                            if (posi.YdPosition == instVolume)
                            {
                                Dispatcher.BeginInvoke(new Action(() => LogicPositionView.Remove(posi)));
                                dicLogicPositions.TryRemove(posiKey, out posi);
                            }
                            else
                            {
                                posi.PositionCost -= posi.AvgPrice * instVolume;
                                posi.Position -= instVolume;
                                posi.YdPosition -= instVolume;
                            }
                        }
                    });
                }
            }
            else
            {
                //取出保存的逻辑持仓数据
                //处理昨仓的数据
                for (int i = 0; i < logicPosiRecords.Positions.Count; i++)
                {
                    LogicPosition logicPosi = logicPosiRecords.Positions[i];
                    if (logicPosi.YdPosition == 0 || logicPosi.IsCombo == false)
                    { continue; }
                    int ydPosition = logicPosi.YdPosition;
                    double preSettlementPrice = 0;
                    double margin = 0;
                    double ydPositionCost = 0;
                    double tradeAmount;
                    int volume;
                    PosiDirection posiDirection;
                    string marginKey = string.Empty;
                    Combo combo;
                    if (dicCustomProduct.TryGetValue(logicPosi.InstrumentID, out combo))
                    {
                        combo.ItemList.ForEach(item =>
                        {
                            preSettlementPrice += item.Weight * dicMarketData[item.InstrumentID].preSettlementPrice;
                            posiDirection = item.Weight > 0 ? logicPosi.Direction : (logicPosi.Direction == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多);
                            tradeAmount = ydPosition * dicMarketData[item.InstrumentID].preSettlementPrice * Math.Abs(item.Weight) * dicInstrumentData[item.InstrumentID].VolumeMultiple;
                            volume = ydPosition * Math.Abs(item.Weight);
                            marginKey = item.InstrumentID + HedgeType.投机;
                            margin += Utility.GetMargin(tradeAmount, volume, posiDirection, T.dicMarginRate[marginKey]);
                            ydPositionCost += tradeAmount;
                        });
                    }
                    //else
                    //{
                    //    preSettlementPrice = dicMarketData[logicPosi.InstrumentID].preSettlementPrice;
                    //    posiDirection = logicPosi.Direction;
                    //    tradeAmount = ydPosition * dicMarketData[logicPosi.InstrumentID].preSettlementPrice * dicInstrumentData[logicPosi.InstrumentID].VolumeMultiple;
                    //    volume = ydPosition;
                    //    marginKey = logicPosi.InstrumentID + HedgeType.投机;
                    //    margin += Utility.GetMargin(tradeAmount, volume, posiDirection, T.dicMarginRate[marginKey]);
                    //    ydPositionCost += tradeAmount;
                    //}

                    logicPosi.YdPosition = ydPosition;
                    logicPosi.OpenCost = logicPosi.OpenCost - logicPosi.OpenAmount;
                    logicPosi.YdOpenCost = logicPosi.OpenCost;

                    logicPosi.CashIn = 0;
                    logicPosi.CloseAmount = 0;
                    logicPosi.CloseProfit = 0;
                    logicPosi.CloseVolume = 0;
                    //logicPosi.Commission = 0;
                    logicPosi.FrozenCash = 0;
                    logicPosi.FrozenCommission = 0;
                    logicPosi.FrozenMargin = 0;
                    logicPosi.OpenAmount = 0;
                    logicPosi.OpenVolume = 0;
                    logicPosi.PositionProfit = 0;
                    logicPosi.PreMargin = margin;
                    logicPosi.PreSettlementPrice = preSettlementPrice;
                    logicPosi.SettlementPrice = 0;
                    logicPosi.TodayPosition = 0;
                    logicPosi.UseMargin = margin;
                    logicPosi.PositionCost = ydPositionCost;
                    logicPosi.Position = ydPosition;

                    string posKey = logicPosi.InvestorID + logicPosi.InstrumentID + logicPosi.Direction;
                    dicLogicPositions.TryAdd(posKey, logicPosi);
                    Dispatcher.Invoke(new Action(() => LogicPositionView.Add(logicPosi)));
                    //剔除组成 组合逻辑持仓中的单腿合约昨仓
                    combo.ItemList.ForEach((item) => {
                        int instVolume = logicPosi.Position * Math.Abs(item.Weight);
                        string posiKey = logicPosi.InvestorID + item.InstrumentID + (item.Weight > 0 ? logicPosi.Direction : logicPosi.Direction == PosiDirection.多 ? PosiDirection.空 : PosiDirection.多);
                        LogicPosition posi;
                        if (dicLogicPositions.TryGetValue(posiKey, out posi))
                        {
                            if (posi.YdPosition == instVolume)
                            {
                                Dispatcher.BeginInvoke(new Action(() => LogicPositionView.Remove(posi)));
                                dicLogicPositions.TryRemove(posiKey, out posi);
                            }
                            else
                            {
                                posi.PositionCost -= posi.AvgPrice * instVolume;
                                posi.Position -= instVolume;
                                posi.YdPosition -= instVolume;
                            }
                        }
                    });
                }           
                LogicOrderMappingList = new List<LogicOrderMapping>();
                LogicOrderMappingList.AddRange(logicPosiRecords.LogicOrderMappings);
                //合成当前交易日的LogicPosition
                LogicOrderMappingList = new List<LogicOrderMapping>();
                LogicOrderMapping mapping;
                logicPosiRecords.LogicOrderMappings.ForEach((ordermapping) =>
                {
                    mapping = new LogicOrderMapping();
                    mapping.OrderParams = ordermapping.OrderParams;
                    mapping.OrderParams.VolumeTraded = 0;
                    LogicOrderMappingList.Add(mapping);
                });
                foreach (var item in dicTradeField.Values)
                {
                    try
                    {
                        LogicOrderAddAnyTrade(item);
                    }
                    catch (Exception ex)
                    { Utility.WriteMemLog(MemLog, ex.Message); }
                }
            }
        }
        #endregion

        #region 窗体公有函数

        public void Ring(string pRing)
        {
            if (File.Exists("wav\\" + pRing + ".wav"))
            {
                new SoundPlayer("wav\\" + pRing + ".wav").Play();
            }
        }

        public void ShowMsg(string pMsg)
        {
            if (this.txtbox11.CheckAccess())
                txtbox11.Text = DateTime.Now.ToString("HH:mm:ss") + " " + pMsg;
            else
                Dispatcher.BeginInvoke(new Action(() => txtbox11.Text = DateTime.Now.ToString("HH:mm:ss") + " " + pMsg));

        }


        /// <summary>
        /// 请求查询合约的交易费（合约为需要订阅行情的合约代码）
        /// </summary>
        public void QryInstrumentCommissionRate(List<string> instrumentIds)
        {
            if(instrumentIds==null || instrumentIds.Count<1)
            { return; }

            List<string> instrumentIDs = new List<string>();
            foreach (var s in instrumentIds)
            {
                instrumentIDs.Add(s);
            }
            //List<string> instrumentIDs = instrumentIds;
            List<string> queriedProductID = new List<string>(); //保存已经查询交易费的品种ID，避免对同一品种，多次查询交易费。

            Task.Run(new Action(() =>
            {
                Utility.WriteMemLog(MemLog, "Start Query CommissionRate");
                QryInstrumentCommissionRateField qryField;
                InstrumentData instrument;
                foreach (var pInstrument in instrumentIDs)
                {
                    //查询交易费
                    if (!string.IsNullOrEmpty(pInstrument) && dicInstrumentData.TryGetValue(pInstrument, out instrument))
                    {
                        if(queriedProductID.Contains(instrument.ProductID))
                        {
                            continue;
                        }
                        qryField = new QryInstrumentCommissionRateField()
                        {
                            BrokerID = Trader.DefaultBrokerID,
                            InvestorID = Trader.Configuration.Investor.ID,
                            InstrumentID = pInstrument
                        };
                        T.ReqQryInstrumentCommissionRate(qryField);
                        queriedProductID.Add(instrument.ProductID);
                        Thread.Sleep(1000);
                    }
                }
                Utility.WriteMemLog(MemLog, "End Query CommissionRate");
            }
            ));
        }

        /// <summary>
        /// 请求查询合约的保证金（合约为需要订阅行情的合约代码）
        /// </summary>
        public void QryInstrumentMarginRate(List<string> instrumentIds)
        {
            if (instrumentIds == null || instrumentIds.Count < 1)
            { return; }
            List<string> instrumentIDs = new List<string>();
            foreach (var s in instrumentIds)
            {
                instrumentIDs.Add(s);
            }
            //List<string> instrumentIDs = instrumentIds;
            Task.Run(new Action(() =>
            {
                Utility.WriteMemLog(MemLog, "Start Query MarginRate");
                InstrumentData instrument;
                foreach (var pInstrument in instrumentIDs)
                {
                    //查询保证金
                    if (!string.IsNullOrEmpty(pInstrument) && dicInstrumentData.TryGetValue(pInstrument, out instrument))
                    {
                        char[] hedges = { '1', '2', '3' };
                        for (int i = 0; i < hedges.Count(); i++)
                        {
                            T.ReqQryInstrumentMarginRate(pInstrument, hedges[i]);
                            Thread.Sleep(1000);
                        }
                    }
                }
                Utility.WriteMemLog(MemLog, "End Query MarginRate");
            }
           ));
        }


        /// <summary>
        /// 根据网络线路更新投资者的服务器
        /// </summary>
        public void UpdateTraderServers(string brokerFileName,string server)
        {
            XmlDocument brokerconfig = new XmlDocument();
            brokerconfig.Load("include/brokers/" + brokerFileName);
            XmlElement brokerroot = brokerconfig.DocumentElement;
            string serverpath = "descendant::Servers/Server[Name=\"" + server + "\"]";
            string brokerIDpath = "descendant::broker/@BrokerID";
            XmlNode BrokerIDNode = brokerroot.SelectSingleNode(brokerIDpath);
            if (BrokerIDNode == null)
            {
                brokerIDpath = "descendant::item/@BrokerID";
                BrokerIDNode = brokerroot.SelectSingleNode(brokerIDpath);
            }
            Trader.DefaultBrokerID = BrokerIDNode.Value;
            XmlNode newservernode = brokerroot.SelectSingleNode(serverpath);
            if (newservernode == null)
            {
                serverpath = "descendant::Servers/item[Name=\"" + server + "\"]";
                newservernode = brokerroot.SelectSingleNode(serverpath);
            }
            XmlNodeList MarketDataIPs = newservernode.SelectSingleNode("MarketData").ChildNodes;
            XmlNodeList TradingIPs = newservernode.SelectSingleNode("Trading").ChildNodes;
            Trader.MarketServer = new List<string>();
            Trader.TradingServer = new List<string>();
            foreach (XmlNode v in MarketDataIPs)
            {
                Trader.MarketServer.Add(v.InnerText);
            }
            foreach (XmlNode v in TradingIPs)
            {
                Trader.TradingServer.Add(v.InnerText);
            }
        }
        #endregion

        #region 自定义命令的CanExecute,Execute函数

        public void DefaultQuant_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
            e.Handled = true;
        }
        public void DefaultQuant_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var cmd = e.Command as RoutedUICommand;
            txtBoxInstrumentID.Text = cmd.Name;
            int defaultQuant = 1;
            DefaultQuantSet quantset;
            if(Trader.DefaultInstrumentQuant.TryGetValue(cmd.Name, out quantset)) //.Where(x => x.Value.InstrumentID == cmd.Name);
            {
                defaultQuant = quantset.Quant;
            }
            tglbtnQuantMode.IsChecked = null;
            scrollbarNum.Value = defaultQuant;

            //orderboard.quantMode = QuantMode.Default;
            //orderboard.Quant = defaultQuant;
            //orderboard.InstrumentID = cmd.Name;

            if (cmd.Name.Length < 3)
            {
                txtBoxInstrumentID.Focus();
            }
            e.Handled = true;
        }

        public void ChangeGroup_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
            e.Handled = true;
        }
        public void ChangeGroup_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var cmd = e.Command as RoutedUICommand;
            SwitchOrUpdateInstrumentIDsGroup(cmd.Name);
            e.Handled = true;
        }

        public void TradeCommand_CanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            RoutedUICommand cmd = e.Command as RoutedUICommand;
            switch (cmd.Name)
            {
                case "全撤":
                    e.CanExecute = (UnsettledOrdersGrid.Items.Count < 1) ? false : true;
                    break;
                case "撤单":
                    e.CanExecute = (UnsettledOrdersGrid.SelectedIndex < 0) ? false : true;
                    break;
                case "对价平仓":
                case "市价平仓":
                case "市价反手":
                    e.CanExecute = (PositionSummaryGrid.SelectedIndex < 0) ? false : true;
                    break;
                case "清仓":
                    e.CanExecute = (PositionSummaryGrid.Items.Count < 1) ? false : true;
                    break;
                case "买":
                case "卖":
                    e.CanExecute = (!string.IsNullOrEmpty(txtBoxInstrumentID.Text) && scrollbarNum.Value > 0);
                    break;
            }
            e.Handled = true;
        }
        /// <summary>
        /// 交易命令Execute函数
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void TradeCommand_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            RoutedUICommand cmd = e.Command as RoutedUICommand;
            PositionDataSummary pos;
            switch (cmd.Name)
            {
                case "全撤":
                    //var orders = UnsettledOrdersGrid.ToList();
                    if (dicOrder.Count < 1)
                    {
                        return;
                    }
                    var orders = dicOrder.Values.ToList().FindAll(x => x.OrderStatus == OrderStatusType.未成交不在队列中 || x.OrderStatus == OrderStatusType.部分成交还在队列中
                    || x.OrderStatus == OrderStatusType.部分成交不在队列中 || x.OrderStatus == OrderStatusType.未成交还在队列中 || x.OrderStatus == OrderStatusType.未知);
                    DeleteAllUnsettledOrder(orders);
                    break;
                case "撤单":
                    var order = UnsettledOrdersGrid.SelectedItem as OrderData;
                    DeleteUnsettledOrder(order);
                    break;
                case "对价平仓":
                    pos = PositionSummaryGrid.SelectedItem as PositionDataSummary;
                    ClosePositionWithOppositePrice(pos);
                    break;
                case "市价平仓":
                    pos = PositionSummaryGrid.SelectedItem as PositionDataSummary;
                    ClosePositionWithMarketPrice(pos);
                    break;
                case "市价反手":
                    pos = PositionSummaryGrid.SelectedItem as PositionDataSummary;
                    T.ReqReversePosition(pos); //ReversePositionMarketPrice(pos);
                    break;
                case "清仓":
                    T.ReqForceClose(MarketDataView[MarketDataGrid.SelectedIndex]);
                    break;
                case "买":
                    T.ReqOrderInsert(MarketDataView[MarketDataGrid.SelectedIndex],TradeDirection.多, MarketDataView[MarketDataGrid.SelectedIndex].OrderBoardQuant); //(TradeDirection.多);
                    break;
                case "卖":
                    T.ReqOrderInsert(MarketDataView[MarketDataGrid.SelectedIndex], TradeDirection.空, MarketDataView[MarketDataGrid.SelectedIndex].OrderBoardQuant);
                    break;
            }
            e.Handled = true;
        }


        #endregion

        private void popInstrument_MouseLeave(object sender, MouseEventArgs e)
        {
            if (txtBoxInstrumentID.IsMouseOver == true |svInstrument.IsMouseOver == true)
                popInstrument.StaysOpen = true;
            else popInstrument.IsOpen = false;
        }

        public void SetExchangeTimeDisp(object sender, ElapsedEventArgs e)
        {
            Dispatcher.BeginInvoke(new Action(() =>
            {
                SHFETime.Text = PreciseTimer.GetPreciseTime(0).ToString("HH:mm:ss.ff");
                DCETime.Text = PreciseTimer.GetPreciseTime(1).ToString("HH:mm:ss.ff");
                CZCETime.Text = PreciseTimer.GetPreciseTime(2).ToString("HH:mm:ss.ff");
                CFFEXTime.Text = PreciseTimer.GetPreciseTime(3).ToString("HH:mm:ss.ff");
                INETime.Text = PreciseTimer.GetPreciseTime(4).ToString("HH:mm:ss.ff");  //能源中心数据为预留
                //Utility.WriteMemLog(MemLog, string.Format("{0} {1} {2} {3}",SHFETime.Text,DCETime.Text, CZCETime.Text, CFFEXTime.Text));
            }));
        }
        void startIntervalTimer()
        {
            IntervalTimer.AutoReset = true;
            IntervalTimer.Elapsed += new ElapsedEventHandler(SetExchangeTimeDisp);
            IntervalTimer.Start();
        }

        /// <summary>
        /// 保存各 grid 数据，以备脱机 debug
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSaveOffline_Click(object sender, RoutedEventArgs e)
        {
            Utility.SaveDataOffline<TradingAccountData>(AccountDataGrid);
            Utility.SaveDataOffline<MarketData>(MarketDataGrid);
            Utility.SaveDataOffline<OrderData>(TodayOrdersGrid);

            Utility.SaveDataOffline<OrderData>(UnsettledOrdersGrid);
            Utility.SaveDataOffline<OrderData>(SettledOrdersGrid);
            Utility.SaveDataOffline<OrderData>(ComplexOrderGrid);

            Utility.SaveDataOffline<PositionData>(PositionDetailsGrid);
            Utility.SaveDataOffline<PositionDataSummary>(PositionSummaryGrid);

            Utility.SaveDataOffline<TradeDataSummary>(TradeRecordSummaryGrid);
            Utility.SaveDataOffline<TradeField>(TradeRecordDetailsGrid);

        }

        private void txtBoxInstrumentID_MouseEnter(object sender, MouseEventArgs e)
        {
            this.txtBoxInstrumentID.SelectAll();
            this.txtBoxInstrumentID.Focus();
        }        
        private void StrategyButton_Click(object sender, RoutedEventArgs e)
        {
            if (strategyWindow == null)
                strategyWindow = new StrategyWindow();
            strategyWindow.Show();
        }     

        private void LoadOffLineData()
        {
            /*
            AccountDataGrid.ItemsSource = TradingAccountDataView;
            MarketDataGrid.ItemsSource = MarketDataView;
            TodayOrdersGrid.ItemsSource = OrderDataView;
            UnsettledOrderGrid.ItemsSource = UnsettledOrdersGrid;
            SettledOrderGrid.ItemsSource = SettledOrderView;
            ComplexOrderGrid.ItemsSource = ParkedOrderView;
            PositionDetailsGrid.ItemsSource = PositionDataView;
            PositionSummaryGrid.ItemsSource = PositionDataSummaryView;
            TradeRecordSummaryGrid.ItemsSource = TradeDataSummaryView;
            TradeRecordDetailsGrid.ItemsSource = TradeDataView;
            */
            try
            {
                //1
                var AccountList = Utility.GetDataOffline<TradingAccountData>("AccountDataGrid");
                if (AccountList != null)
                {
                    foreach (var item in AccountList)
                    {
                        TradingAccountDataView.Add(item);
                    }
                }
                //2
                var MarketList = Utility.GetDataOffline<MarketData>("MarketDataGrid");
                if (MarketList != null)
                {
                    foreach (var item in MarketList)
                    {
                        MarketDataView.Add(item);
                    }
                }
                //3
                var TodayOrderList = Utility.GetDataOffline<OrderData>("TodayOrdersGrid");
                if (TodayOrderList != null)
                {
                    foreach (var item in TodayOrderList)
                    {
                        OrderDataView.Add(item);
                    }
                }
                //4
                var UnsettledOrderList = Utility.GetDataOffline<OrderData>("UnsettledOrderGrid");
                if (UnsettledOrderList != null)
                {
                    foreach (var item in UnsettledOrderList)
                    {
                        //UnsettledOrdersView.Add(item);
                    }
                }
                //5
                var SettledOrderList = Utility.GetDataOffline<OrderData>("SettledOrderGrid");
                if (SettledOrderList != null)
                {
                    foreach (var item in SettledOrderList)
                    {
                        //SettledOrdersView.Add(item);
                    }
                }
                //6
                var ComplexOrderSetList = Utility.GetDataOffline<OrderData>("ComplexOrderGrid");
                if (ComplexOrderSetList != null)
                {
                    foreach (var item in ComplexOrderSetList)
                    {
                        ParkedOrderView.Add(item);
                    }
                }
                //7
                var PositionDetailList = Utility.GetDataOffline<PositionDetail>("PositionDetailsGrid");
                if (PositionDetailList != null)
                {
                    foreach (var item in PositionDetailList)
                    {
                        PositionDetailView.Add(item);
                    }
                }
                //8
                var PositionSummaryList = Utility.GetDataOffline<PositionDataSummary>("PositionSummaryGrid");
                if (PositionSummaryList != null)
                {
                    foreach (var item in PositionSummaryList)
                    {
                        PositionDataSummaryView.Add(item);
                    }
                }
                //9
                var TradeRecordDetailList = Utility.GetDataOffline<TradeField>("TradeRecordDetailsGrid");
                if (TradeRecordDetailList != null)
                {
                    foreach (var item in TradeRecordDetailList)
                    {
                        TradeDataView.Add(item);
                    }
                }
                //10
                var TradeRecordSummaryList = Utility.GetDataOffline<TradeDataSummary>("TradeRecordSummaryGrid");
                if (TradeRecordSummaryList != null)
                {
                    foreach (var item in TradeRecordSummaryList)
                    {
                        TradeDataSummaryView.Add(item);
                    }
                }
            }
            catch (Exception e2)
            {

            }
        }
    }
}